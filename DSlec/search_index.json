[["index.html", "データ分析入門 chapter: 1 イントロダクション 1.1 講義の概要 1.2 履修上の注意点 1.3 授業計画 1.4 謝辞", " データ分析入門 山本 雅資 2025-04-06 このページは「現代の経済問題A」(前期:月２)および「現代の経済問題B」(後期:木2)で使うコンテンツをまとめたものです。履修希望者は、AとBの両方を履修することをお勧めします。 chapter: 1 イントロダクション 1.1 講義の概要 本講義では、Rというプログラミング言語を用いて、社会・経済関連のデータについて、初歩的な分析することができるようになることを目指します。ビジネスにおける活用を例としたR言語の紹介については以下のリンクを参考にしてください。 日経クロステック (2020)「統計解析に便利、R言語の基本を実践で理解する」 Rは無料で提供されており、RStudioと呼ばれるインターフェースと同時に用いることで初心者にも比較的直感的に利用できる非常に優れた分析ツールです。講義では、プログラミングが初めての学生を想定して、Rのインストールから丁寧に行います。その上で、データの集計方法、グラフ、地図等による可視化、統計的仮説検定などを実行する方法を学びます。 1.2 履修上の注意点 講義の性質上、履修人数制限を設ける場合があります。講義にノートパソコン（Mac or Windows)を持参できることを履修の条件とします。 1.3 授業計画 詳細はシラバスを参照してください。 講義での進捗・理解度に応じて、内容は変更する可能性があります。 1.4 謝辞 このページの作成にあたっては多くのウェブサイトや先人の皆様のウェブ・SNSでのやりとりなどを参考にさせていただきました。たくさんありすぎてここに列挙することはできませんが、心より感謝申し上げます。 "],["chapter02.html", "chapter: 2 R及びRStudioのインストール 2.1 インストールを始める前に 2.2 Rのインストール 2.3 RStudioのインストール", " chapter: 2 R及びRStudioのインストール 2.1 インストールを始める前に 思いつく順にいくつか注意点をまとめてみました。 プログラミングを始めるということは、マウスをあまり使わない世界に足を踏み入れること。 一つ一つの作業が文字として残るので、作業の再現性が高まります。 クリックして探していたファイルを「パス(path)」という「住所」を示すことでパソコンに伝えることになります。 全角入力(日本語入力：原則コメント欄のみ)と半角入力(英数字入力)の違いをいつも意識する。 １２３４５は全角文字です。 12345は半角文字です。 1と１は区別がつきにくいですが、全角文字はプログラミングコードには使用できません。 変数やフォルダの名前をつける際に、スペースを入れることはトラブルのもとなのでなるべくスペースを含む名前はつけない。 ちなみに、スペースの半角と全角は肉眼ではまず区別できません。 Rは大文字と小文字を区別する言語（プログラミング言語によっては区別しないものもある）。 頻出する「フォルダ」と「ディレクトリ」は、ほぼ同じ意味と考えて良い。 Rはインターネットアクセスのあるところで利用することでその真価を発揮できる。 学内の無線LANにはすぐにアクセスできる状態にしておきましょう。 2.2 Rのインストール Rを利用する上で最大の難関がRのインストールです。幸い、高知工科大学の矢内勇生先生が大変わかりやすいインストールガイドを作成してくださっています。自分の使っているマシンに応じて以下のいずれかの資料を参照してインストールを進めましょう。 Windows用のインストールガイド Mac用のインストールガイド Rのインストールは環境によっては非常に簡単です。本講義の学生にとって、矢内先生のマニュアルに沿ってインストールすることが重要なのは、多くの学生が日本語版のウィンドウズかMacOSを使用しているためです。Rが利用するディレクトリなどに、半角英数以外の名前(日本語など）が使用されていると大きな問題を引き起こすことがあります。 上記のインストールガイドに書いてあることを順番に一つずつ実行すれば必ず成功します。ただし、以下はガイドのうち、とばしてもらっても大丈夫なものです。 ウィンドウズユーザー プログラミング用のフォントの話題 Rtoolsのインストール RStudioのカスタマイズ Macユーザー RStudioのカスタマイズ この作業にはダウンロードなども含めて大変時間がかかります。2回分の講義時間をとってありますので、じっくり腰を据えておこないましょう。 2.3 RStudioのインストール こちらはRのインストールに比べるとかなり楽に行うことができます。必ず先にR本体をインストールしてから、RStudioをインストールしてください。 Windows版のガイドでは、P82からがRStudioのインストールガイドです。 MacOS版のガイドでは、P34からがRStudioのインストールガイドです。 "],["chapter03.html", "chapter: 3 Rを使ってみよう：四則演算から外部データの読み込みまで 3.1 基本的な計算 3.2 変数の定義 3.3 データフレーム 3.4 データの型 3.5 パッケージの考え方 3.6 外部ファイルの読み込み 3.7 描画系のpackageの例", " chapter: 3 Rを使ってみよう：四則演算から外部データの読み込みまで 3.1 基本的な計算 計算してみよう # 足し算・引き算 1+1 ## [1] 2 3-1 ## [1] 2 150-121 ## [1] 29 # 記号「*」は掛け算を意味する 2*2 ## [1] 4 # 割り算は「/」を用いる 10/5 ## [1] 2 # 「^」はべき乗を意味する。 3^2 ## [1] 9 3^3 ## [1] 27 3^4 ## [1] 81 # 「sqrt」で平方根が計算できる。 sqrt(100) ## [1] 10 sqrt(25) ## [1] 5 sqrt(8) ## [1] 2.8 sqrt(2) ## [1] 1.4 3.2 変数の定義 # 「&lt;-」は代入操作を意味する x&lt;-4 2*x ## [1] 8 # ベクトルを代入 x&lt;-1:10 print(x) ## [1] 1 2 3 4 5 6 7 8 9 10 # seq(a,b,c)：aからbまでをc刻みで生成 y&lt;-seq(1,10,1) print(y) ## [1] 1 2 3 4 5 6 7 8 9 10 z&lt;-seq(1,10,2) print(z) ## [1] 1 3 5 7 9 # 文字列の扱い my_words&lt;-c(&quot;Good morning&quot;, &quot;Good afternoon&quot;, &quot;Good evening&quot;) print(my_words) ## [1] &quot;Good morning&quot; &quot;Good afternoon&quot; &quot;Good evening&quot; First&lt;-&quot;Good&quot; Second&lt;-c(&quot;mornig&quot;, &quot;afternoon&quot;, &quot;evening&quot;) # デフォルトでは、スペースで接続 First_Second&lt;-paste(First, Second) print(First_Second) ## [1] &quot;Good mornig&quot; &quot;Good afternoon&quot; &quot;Good evening&quot; # 接続の記号を変更 FSplus&lt;-paste(First, Second,sep=&quot;+&quot;) print(FSplus) ## [1] &quot;Good+mornig&quot; &quot;Good+afternoon&quot; &quot;Good+evening&quot; 3.3 データフレーム 上の例では、c()を使って、ベクトルとしてデータを扱う方法を確認しました。実際の分析では、ベクトルをいくつか集めたデータフレームを使って実証分析を行うことがほとんどです。以下では、ベクトルからデータフレームを作成する方法を示します。ただし、実際の分析では、ほとんどの場合、外部データ（行政が提供するエクセルファイルなど）から直接データフレームとして読み込みます。 # 日本の都道府県には固有の番号がある。 prefcode&lt;-c(1, 2,3,4,5,6,7, 8,9,10,11,12,13,14, 15,16,17,18, 19,20,21,22,23, 24,25,26,27,28,29,30, 31,32,33,34,35, 36,37,38,39, 40,41,42,43,44,45,46, 47) prefnameJ&lt;-c(&quot;01北海道&quot;, &quot;02青森県&quot;,&quot;03岩手県&quot;,&quot;04宮城県&quot;,&quot;05秋田県&quot;, &quot;06山形県&quot;,&quot;07福島県&quot;, &quot;08茨城県&quot;,&quot;09栃木県&quot;,&quot;10群馬県&quot;,&quot;11埼玉県&quot;, &quot;12千葉県&quot;,&quot;13東京都&quot;,&quot;14神奈川県&quot;, &quot;15新潟県&quot;,&quot;16富山県&quot;,&quot;17石川県&quot;,&quot;18福井県&quot;, &quot;19山梨県&quot;,&quot;20長野県&quot;,&quot;21岐阜県&quot;,&quot;22静岡県&quot;, &quot;23愛知県&quot;, &quot;24三重県&quot;,&quot;25滋賀県&quot;,&quot;26京都府&quot;,&quot;27大阪府&quot;, &quot;28兵庫県&quot;,&quot;29奈良県&quot;,&quot;30和歌山県&quot;, &quot;31鳥取県&quot;,&quot;32島根県&quot;,&quot;33岡山県&quot;,&quot;34広島県&quot;, &quot;35山口県&quot;, &quot;36徳島県&quot;,&quot;37香川県&quot;,&quot;38愛媛県&quot;,&quot;39高知県&quot;, &quot;40福岡県&quot;,&quot;41佐賀県&quot;,&quot;42長崎県&quot;,&quot;43熊本県&quot;, &quot;44大分県&quot;,&quot;45宮崎県&quot;,&quot;46鹿児島県&quot;, &quot;47沖縄県&quot;) print(prefnameJ) ## [1] &quot;01北海道&quot; &quot;02青森県&quot; &quot;03岩手県&quot; &quot;04宮城県&quot; &quot;05秋田県&quot; &quot;06山形県&quot; &quot;07福島県&quot; ## [8] &quot;08茨城県&quot; &quot;09栃木県&quot; &quot;10群馬県&quot; &quot;11埼玉県&quot; &quot;12千葉県&quot; &quot;13東京都&quot; &quot;14神奈川県&quot; ## [15] &quot;15新潟県&quot; &quot;16富山県&quot; &quot;17石川県&quot; &quot;18福井県&quot; &quot;19山梨県&quot; &quot;20長野県&quot; &quot;21岐阜県&quot; ## [22] &quot;22静岡県&quot; &quot;23愛知県&quot; &quot;24三重県&quot; &quot;25滋賀県&quot; &quot;26京都府&quot; &quot;27大阪府&quot; &quot;28兵庫県&quot; ## [29] &quot;29奈良県&quot; &quot;30和歌山県&quot; &quot;31鳥取県&quot; &quot;32島根県&quot; &quot;33岡山県&quot; &quot;34広島県&quot; &quot;35山口県&quot; ## [36] &quot;36徳島県&quot; &quot;37香川県&quot; &quot;38愛媛県&quot; &quot;39高知県&quot; &quot;40福岡県&quot; &quot;41佐賀県&quot; &quot;42長崎県&quot; ## [43] &quot;43熊本県&quot; &quot;44大分県&quot; &quot;45宮崎県&quot; &quot;46鹿児島県&quot; &quot;47沖縄県&quot; print(prefnameJ)で都道府県名を出力しています。ここで[1]はprefnameJというベクトルの中の第１要素を意味しています。出力が長い場合、改行されるごとに先頭の要素番号が出力されます。 # 以下のデータは # 総務省「統計でみる都道府県のすがた2020」 # より抜粋している。 # 変数の対応関係 # A1101_総人口【人】 # B1101_総面積（北方地域及び竹島を除く）【ｈａ】 # D110101_市町村数【‐】 A1101&lt;-c(5286000, #北海道 1263000,1241000,2316000,981000,1090000,1864000, #東北 2877000,1946000,1952000,7330000,6255000,13822000,9177000, #関東 2246000,1050000,1143000,774000, #新潟＋北陸 817000,2063000,1997000,3659000,7537000, #中部 1791000,1412000,2591000,8813000,5484000,1339000,935000, #近畿 560000,680000,1898000,2817000,1370000, #中国 736000,962000,1352000,706000, #四国 5107000,819000,1341000,1757000,1144000,1081000,1614000, #九州 1448000) #沖縄 B1101&lt;-c(7842077, 964565,1527501,728223,1163752,932315,1378390, 609733,640809,636228,379775,515761,219396,241616, 1258423,424761,418605,419052, 446527,1356156,1062129,777735,517296, 577442,401738,461220,190529,840095,369094,472465, 350714,670807,711433,847961,611253, 414675,187678,567624,710363, 498651,244070,413090,740950,634073,773532,918702, 228105) D110101&lt;-c(179, 40,33,35,25,35,59, 44,25,35,63,54,62,33, 30,15,19,17, 27,77,42,35,54, 29,19,26,43,41,39,30, 19,19,27,23,19, 24,17,20,34, 60,20,21,45,18,26,43, 41) testDB&lt;-data.frame(cbind(prefcode,prefnameJ,A1101,B1101,D110101)) head(testDB) ## prefcode prefnameJ A1101 B1101 D110101 ## 1 1 01北海道 5286000 7842077 179 ## 2 2 02青森県 1263000 964565 40 ## 3 3 03岩手県 1241000 1527501 33 ## 4 4 04宮城県 2316000 728223 35 ## 5 5 05秋田県 981000 1163752 25 ## 6 6 06山形県 1090000 932315 35 3.4 データの型 コンピュータが保存しているデータには、型があります。言語によっては事前にどの型で読み込むかを宣言する必要がありますが、Rは自動で判断します。 型 解説 数値型 整数だけでなく小数点を含む数も対象。一般の四則演算と同様にカッコ内は先に計算される。 文字列型 文字、特殊文字、数字を組み合わせた変数で、文字列型は四則演算は適用できない。文字列型であることを指定するためには、\"(ダブルクオーテーション)で囲む。 論理型 TRUE (真)とFALSE (偽)という２つの値をとる。ブーリアン型と呼ばれることもある。TRUEとFALSEは、TやFと省略の可能。 因子型 女性を0、男性を1とするなど、順序のない(=factor型)カテゴリカルデータを扱う場合に使用。 整数型 値を整数として扱うための型で、入力時に値の後ろにLをつける。 複素型 入力した値を複素数として扱うための型で、入力時に値の後ろにiをつける。 データを整理している途中で自分では意図せずともデータの型が変わってしまう場合があります。そのような場合はデータの型を変換する必要があります。 例えば、上の例で、A1101というベクトルは、数値型として読み込まれています。そのため、平均を計算することができます。 is.numeric(A1101) ## [1] TRUE mean(A1101) ## [1] 2690277 ところが、データフレームとしてベクトルをまとめるステップで文字列データに変換されています。そのため、データフレームの中にあるA1101の平均が計算できません。 is.numeric(testDB$A1101) ## [1] FALSE str(testDB$A1101) ## chr [1:47] &quot;5286000&quot; &quot;1263000&quot; &quot;1241000&quot; &quot;2316000&quot; &quot;981000&quot; &quot;1090000&quot; &quot;1864000&quot; &quot;2877000&quot; ... mean(testDB$A1101) ## Warning in mean.default(testDB$A1101): argument is not numeric or logical: returning NA ## [1] NA chrという記号が文字列型であることを示しています。そのため、データの型を文字列型から数値型に変換する必要があります。 testDB$A1101&lt;-as.numeric(testDB$A1101) mean(testDB$A1101) ## [1] 2690277 また、データの尺度にもいくつか種類があります。以下の表はこちらから引用しています (p114)。 尺度 例 適用可能な演算 名義尺度 果物、りんご、バナナ、オレンジなど ==, != 順序尺度 ホテルのレーティング、５つ星、４つ星など ==, != 比率尺度 長さ、１インチ、1.5インチ、2インチなど ==, !=, &lt;,&gt;,+,-,*,/ 間隔尺度 日付、2012/05/15, 2015/04/17など ==, !=, &lt;,&gt;,+,- 3.5 パッケージの考え方 Rにはpackageという概念があります。プログラミング言語は様々な用途が想定されています。学術研究に限っても、経済学で使用する内容と工学系あるいは医学系で利用する内容は大きく異なります。これらの用途全てに対応するようにR本体を備えてしまうとリソースの無駄が生じます。そのため、Rでは、R本体の機能を最小限に制限し、自身の目的に合わせて必要な道具を付け足していく方式をとっています。その付け足す道具をpackageと呼んでいます。 packageは一回だけインストールする必要があります。インストールはインターネットを使用しておこないますので、インターネットに接続していることが必要です。そして、インストール済みのpackageでも使用する際は毎回呼び出す必要があります。この呼び出しは自身の端末の中にあるものを呼び出すので、インターネット接続は不要です。 文房具に例えると、水彩画を描くために絵の具が必要なので、絵の具を文具店に買いにいくことがインストールです。いざ、今から絵の具を使って絵を描くぞ、というタイミングで絵の具をパレットの上に広げることが「呼び出し」です。 3.6 外部ファイルの読み込み では実際にpackageを使って、外部ファイルを読み込んでみましょう。 デフォルトのRではエクセルファイルをそのまま読むことはできません。ここではエクセルファイルの読み込みに、readxlというpackageを使用します。 # 一度だけインストールが必要 #install.packages(&quot;readxl&quot;) # ライブラリコマンドでの読み込みは毎回必要 library(readxl) # 変数の対応関係 # A1101_総人口【人】 # A1301_15歳未満人口【人】 # A1303_65歳以上人口【人】 # B1101_ 総面積（北方地域及び竹島を除く）【ｈａ】 # B1103_ 可住地面積【ｈａ】 # B4107_ 雪日数（年間）【日】 # B4108_ 日照時間（年間）【時間】 # D110101_市町村数【‐】 # E6102_大学数【校】 # E6302_大学学生数【人】 # F610201_超過実労働時間数（男）【時間】 # F610202_超過実労働時間数（女）【時間】 # H110202_空き家数【戸】 #自分のパソコンに保存してあるエクセルファイルを読み込む場合は、 #以下でディレクトリを変更して実行 #getwd() # 現在の作業ディレクトリを確認 #setwd(&quot;/users/yamamoto/R/ForTeaching&quot;) # 作業ディレクトリの変更 #ウェブサイトから直接ダウンロードする場合 url1&lt;-&quot;https://yamamoto-masashi.github.io/DSlec/20201028sample.xls&quot; download.file(url1,destfile=&quot;20201028sample.xls&quot;) # エクセルファイルの読み込み # ヘッダ部分を読み飛ばしている # sheet=1を変更することで別のシートも読める sampleDB&lt;-readxl::read_excel(&quot;20201028sample.xls&quot;,skip=5,sheet=1) ## New names: ## • `` -&gt; `...1` ## • `` -&gt; `...2` # 列１と列２の名前を変更している。 names(sampleDB)[1:2]&lt;-c(&quot;prefcode&quot;,&quot;prefnameJ&quot;) head(sampleDB) ## # A tibble: 6 × 16 ## prefcode prefnameJ A1101 A1301 A1303 B1101 B1103 B4107 B4108 D110101 E6102 E6302 F610201 ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 01北海道 5286000 577000 1.66e6 7.84e6 2.24e6 131 1742. 179 38 78122 15 ## 2 2 02青森県 1263000 137000 4.12e5 9.65e5 3.23e5 117 1642 40 10 15196 14 ## 3 3 03岩手県 1241000 140000 4.03e5 1.53e6 3.71e5 106 1778. 33 6 11373 15 ## 4 4 04宮城県 2316000 276000 6.43e5 7.28e5 3.15e5 63 1998. 35 14 48623 17 ## 5 5 05秋田県 981000 98000 3.57e5 1.16e6 3.20e5 101 1526. 25 7 8947 13 ## 6 6 06山形県 1090000 127000 3.58e5 9.32e5 2.88e5 89 1765 35 6 11609 16 ## # ℹ 3 more variables: F610202 &lt;dbl&gt;, H110202 &lt;dbl&gt;, Kanto &lt;dbl&gt; 表の変数名の下の&lt;dbl&gt;は変数が数値型であることを示しています。 # read_excel()関数で読み込んだ場合は、文字列になっていないので、平均が計算可能。 mean(sampleDB$A1101) ## [1] 2690277 3.7 描画系のpackageの例 以下では、例として、こちらから各種スポーツのフィールドやコートを描くpackageをインストールして、実際に描画するデモを示したいと思います。 注意：このpackageはグラフ作成の有名packageであるggplot2に依存しているので、以下のコマンドの実行には、ggplot2のインストールも必要です。 library(ggplot2) # packageのインストールコマンド # 以下でsportyRというpackageをインストールしている #install.packages(&#39;sportyR&#39;) # 以下のコマンドでsportRを呼び出す library(sportyR) library(sportyR) # Create a 100m by 75m FIFA pitch geom_soccer( &quot;fifa&quot;, pitch_updates = list( pitch_length = 100, pitch_width = 75 ) ) #NBAのコート geom_basketball(&quot;nba&quot;, display_range = &quot;offense&quot;, rotation = 270) #カーリングのコート geom_curling(&quot;wcf&quot;, display_range = &quot;house&quot;) "],["chapter04.html", "chapter: 4 可視化(1)：ggplot2によるグラフ作成 4.1 可視化の重要性 4.2 Rによる可視化のデモ 4.3 ggplot2の考え方 4.4 ggplot2の事例", " chapter: 4 可視化(1)：ggplot2によるグラフ作成 Rを使用することの大きなメリットの一つが多彩なグラフィック機能です。グラフなどを用いて、データを可視化することで自分の分析対象をより深く理解できるようになります。 4.1 可視化の重要性 はじめにサンプルデータを用いて、可視化の持つ意味について考えます。 # install.packages(&quot;datasets&quot;) library(datasets) print(anscombe) ## x1 x2 x3 x4 y1 y2 y3 y4 ## 1 10 10 10 8 8.0 9.1 7.5 6.6 ## 2 8 8 8 8 7.0 8.1 6.8 5.8 ## 3 13 13 13 8 7.6 8.7 12.7 7.7 ## 4 9 9 9 8 8.8 8.8 7.1 8.8 ## 5 11 11 11 8 8.3 9.3 7.8 8.5 ## 6 14 14 14 8 10.0 8.1 8.8 7.0 ## 7 6 6 6 8 7.2 6.1 6.1 5.2 ## 8 4 4 4 19 4.3 3.1 5.4 12.5 ## 9 12 12 12 8 10.8 9.1 8.2 5.6 ## 10 7 7 7 8 4.8 7.3 6.4 7.9 ## 11 5 5 5 8 5.7 4.7 5.7 6.9 このデータ例は、統計学者のフランク・アンスコムが1973年に紹介した例です。この例では、\\(x\\) の平均(=mean)は\\(9\\)、\\(x\\) の標準偏差(=sd)は\\(3.32\\)、\\(y\\)の平均が\\(7.50\\) (小数第2位まで一致)、\\(y\\)の標準偏差が \\(2.03\\) (小数第3位まで一致)、と等しくなっています。 # 記述統計を出力するためのpackage # include.packages(&quot;psych) library(psych) descriptive_statistics&lt;-describe(anscombe,skew = FALSE, ranges = FALSE) print(descriptive_statistics) ## vars n mean sd se ## x1 1 11 9.0 3.3 1.00 ## x2 2 11 9.0 3.3 1.00 ## x3 3 11 9.0 3.3 1.00 ## x4 4 11 9.0 3.3 1.00 ## y1 5 11 7.5 2.0 0.61 ## y2 6 11 7.5 2.0 0.61 ## y3 7 11 7.5 2.0 0.61 ## y4 8 11 7.5 2.0 0.61 また、\\(x_i\\)と\\(y_i\\)の間の相関係数も少数第３位で四捨五入して\\(0.82\\)と一致しています。 \\[ r = \\frac{\\frac{1}{n}\\sum_{i=1}^{n}(x_{i}-\\overline{x})(y_{i}-\\overline{y})}{\\sqrt{\\frac{1}{n}\\sum_{i=1}^{n}(x_{i}-\\overline{x})^{2}}\\sqrt{\\frac{1}{n}\\sum_{i=1}^{n}(y_{i}-\\overline{y})^{2}}} = \\frac{s_{xy}}{s_{x}s_{y}} \\] #x1とy1の相関係数 x1y1&lt;-cor(anscombe$x1,anscombe$y1) x2y2&lt;-cor(anscombe$x2,anscombe$y2) x3y3&lt;-cor(anscombe$x3,anscombe$y3) x4y4&lt;-cor(anscombe$x4,anscombe$y4) options(digits=2) # 表示桁数を小数点第２位までに変える print(c(x1y1,x2y2,x3y3,x4y4)) ## [1] 0.82 0.82 0.82 0.82 ところが、このデータをプロットしてみると以下のようになります (描画に用いたggplot2の解説はこの後に行います)。 # 4組のグラフを作成する plotx1y1&lt;-ggplot(anscombe)+geom_point(aes(x=x1,y=y1),size=3)+ xlim(2.5,20)+ylim(2.5,12.9)+ggtitle(&quot;Set 1&quot;) plotx2y2&lt;-ggplot(anscombe)+geom_point(aes(x=x2,y=y2),size=3)+ xlim(2.5,20)+ylim(2.5,12.9)+ggtitle(&quot;Set 2&quot;) plotx3y3&lt;-ggplot(anscombe)+geom_point(aes(x=x3,y=y3),size=3)+ xlim(2.5,20)+ylim(2.5,12.9)+ggtitle(&quot;Set 3&quot;) plotx4y4&lt;-ggplot(anscombe)+geom_point(aes(x=x4,y=y4),size=3)+ xlim(2.5,20)+ylim(2.5,12.9)+ggtitle(&quot;Set 4&quot;) # このpackageでグラフを組み合わせる #install.packages(&quot;patchwork&quot;) library(patchwork) plotx1y1 + plotx2y2 +plotx3y3+plotx4y4+ plot_layout(ncol = 2, heights = c(5, 4)) このように全く異なるデータの分布をしていることがわかります。要約統計量だけをみて判断せずに常にグラフにデータをプロットしてみることが重要です。 4.2 Rによる可視化のデモ コマンドラインで図を作成することははじめは面倒に思うかもしれません。しかし、どのようなグラフを作成するかを一つ一つ命令に書きますので、一度作成してしまえばコピーペーストで簡単に複製することができます。ところがクリックベースでグラフを作成した場合、完成したグラフをコピーしたとしても必ずしも元のグラフと同じにはなりません。ズレた場合にも目測で直す必要があります。 Rによる可視化の例を公式デモにて確認します。 demo(graphics) ## ## ## demo(graphics) ## ---- ~~~~~~~~ ## ## &gt; # Copyright (C) 1997-2009 The R Core Team ## &gt; ## &gt; require(datasets) ## ## &gt; require(grDevices); require(graphics) ## ## &gt; ## Here is some code which illustrates some of the differences between ## &gt; ## R and S graphics capabilities. Note that colors are generally specified ## &gt; ## by a character string name (taken from the X11 rgb.txt file) and that line ## &gt; ## textures are given similarly. The parameter &quot;bg&quot; sets the background ## &gt; ## parameter for the plot and there is also an &quot;fg&quot; parameter which sets ## &gt; ## the foreground color. ## &gt; ## &gt; ## &gt; x &lt;- stats::rnorm(50) ## ## &gt; opar &lt;- par(bg = &quot;white&quot;) ## ## &gt; plot(x, ann = FALSE, type = &quot;n&quot;) ## ## &gt; abline(h = 0, col = gray(.90)) ## ## &gt; lines(x, col = &quot;green4&quot;, lty = &quot;dotted&quot;) ## ## &gt; points(x, bg = &quot;limegreen&quot;, pch = 21) ## ## &gt; title(main = &quot;Simple Use of Color In a Plot&quot;, ## + xlab = &quot;Just a Whisper of a Label&quot;, ## + col.main = &quot;blue&quot;, col.lab = gray(.8), ## + cex.main = 1.2, cex.lab = 1.0, font.main = 4, font.lab = 3) ## ## &gt; ## A little color wheel. This code just plots equally spaced hues in ## &gt; ## a pie chart. If you have a cheap SVGA monitor (like me) you will ## &gt; ## probably find that numerically equispaced does not mean visually ## &gt; ## equispaced. On my display at home, these colors tend to cluster at ## &gt; ## the RGB primaries. On the other hand on the SGI Indy at work the ## &gt; ## effect is near perfect. ## &gt; ## &gt; par(bg = &quot;gray&quot;) ## ## &gt; pie(rep(1,24), col = rainbow(24), radius = 0.9) ## ## &gt; title(main = &quot;A Sample Color Wheel&quot;, cex.main = 1.4, font.main = 3) ## ## &gt; title(xlab = &quot;(Use this as a test of monitor linearity)&quot;, ## + cex.lab = 0.8, font.lab = 3) ## ## &gt; ## We have already confessed to having these. This is just showing off X11 ## &gt; ## color names (and the example (from the postscript manual) is pretty &quot;cute&quot;. ## &gt; ## &gt; pie.sales &lt;- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12) ## ## &gt; names(pie.sales) &lt;- c(&quot;Blueberry&quot;, &quot;Cherry&quot;, ## + &quot;Apple&quot;, &quot;Boston Cream&quot;, &quot;Other&quot;, &quot;Vanilla Cream&quot;) ## ## &gt; pie(pie.sales, ## + col = c(&quot;purple&quot;,&quot;violetred1&quot;,&quot;green3&quot;,&quot;cornsilk&quot;,&quot;cyan&quot;,&quot;white&quot;)) ## ## &gt; title(main = &quot;January Pie Sales&quot;, cex.main = 1.8, font.main = 1) ## ## &gt; title(xlab = &quot;(Don&#39;t try this at home kids)&quot;, cex.lab = 0.8, font.lab = 3) ## ## &gt; ## Boxplots: I couldn&#39;t resist the capability for filling the &quot;box&quot;. ## &gt; ## The use of color seems like a useful addition, it focuses attention ## &gt; ## on the central bulk of the data. ## &gt; ## &gt; par(bg=&quot;cornsilk&quot;) ## ## &gt; n &lt;- 10 ## ## &gt; g &lt;- gl(n, 100, n*100) ## ## &gt; x &lt;- rnorm(n*100) + sqrt(as.numeric(g)) ## ## &gt; boxplot(split(x,g), col=&quot;lavender&quot;, notch=TRUE) ## ## &gt; title(main=&quot;Notched Boxplots&quot;, xlab=&quot;Group&quot;, font.main=4, font.lab=1) ## ## &gt; ## An example showing how to fill between curves. ## &gt; ## &gt; par(bg=&quot;white&quot;) ## ## &gt; n &lt;- 100 ## ## &gt; x &lt;- c(0,cumsum(rnorm(n))) ## ## &gt; y &lt;- c(0,cumsum(rnorm(n))) ## ## &gt; xx &lt;- c(0:n, n:0) ## ## &gt; yy &lt;- c(x, rev(y)) ## ## &gt; plot(xx, yy, type=&quot;n&quot;, xlab=&quot;Time&quot;, ylab=&quot;Distance&quot;) ## ## &gt; polygon(xx, yy, col=&quot;gray&quot;) ## ## &gt; title(&quot;Distance Between Brownian Motions&quot;) ## ## &gt; ## Colored plot margins, axis labels and titles. You do need to be ## &gt; ## careful with these kinds of effects. It&#39;s easy to go completely ## &gt; ## over the top and you can end up with your lunch all over the keyboard. ## &gt; ## On the other hand, my market research clients love it. ## &gt; ## &gt; x &lt;- c(0.00, 0.40, 0.86, 0.85, 0.69, 0.48, 0.54, 1.09, 1.11, 1.73, 2.05, 2.02) ## ## &gt; par(bg=&quot;lightgray&quot;) ## ## &gt; plot(x, type=&quot;n&quot;, axes=FALSE, ann=FALSE) ## ## &gt; usr &lt;- par(&quot;usr&quot;) ## ## &gt; rect(usr[1], usr[3], usr[2], usr[4], col=&quot;cornsilk&quot;, border=&quot;black&quot;) ## ## &gt; lines(x, col=&quot;blue&quot;) ## ## &gt; points(x, pch=21, bg=&quot;lightcyan&quot;, cex=1.25) ## ## &gt; axis(2, col.axis=&quot;blue&quot;, las=1) ## ## &gt; axis(1, at=1:12, lab=month.abb, col.axis=&quot;blue&quot;) ## ## &gt; box() ## ## &gt; title(main= &quot;The Level of Interest in R&quot;, font.main=4, col.main=&quot;red&quot;) ## ## &gt; title(xlab= &quot;1996&quot;, col.lab=&quot;red&quot;) ## ## &gt; ## A filled histogram, showing how to change the font used for the ## &gt; ## main title without changing the other annotation. ## &gt; ## &gt; par(bg=&quot;cornsilk&quot;) ## ## &gt; x &lt;- rnorm(1000) ## ## &gt; hist(x, xlim=range(-4, 4, x), col=&quot;lavender&quot;, main=&quot;&quot;) ## ## &gt; title(main=&quot;1000 Normal Random Variates&quot;, font.main=3) ## ## &gt; ## A scatterplot matrix ## &gt; ## The good old Iris data (yet again) ## &gt; ## &gt; pairs(iris[1:4], main=&quot;Edgar Anderson&#39;s Iris Data&quot;, font.main=4, pch=19) ## ## &gt; pairs(iris[1:4], main=&quot;Edgar Anderson&#39;s Iris Data&quot;, pch=21, ## + bg = c(&quot;red&quot;, &quot;green3&quot;, &quot;blue&quot;)[unclass(iris$Species)]) ## ## &gt; ## Contour plotting ## &gt; ## This produces a topographic map of one of Auckland&#39;s many volcanic &quot;peaks&quot;. ## &gt; ## &gt; x &lt;- 10*1:nrow(volcano) ## ## &gt; y &lt;- 10*1:ncol(volcano) ## ## &gt; lev &lt;- pretty(range(volcano), 10) ## ## &gt; par(bg = &quot;lightcyan&quot;) ## ## &gt; pin &lt;- par(&quot;pin&quot;) ## ## &gt; xdelta &lt;- diff(range(x)) ## ## &gt; ydelta &lt;- diff(range(y)) ## ## &gt; xscale &lt;- pin[1]/xdelta ## ## &gt; yscale &lt;- pin[2]/ydelta ## ## &gt; scale &lt;- min(xscale, yscale) ## ## &gt; xadd &lt;- 0.5*(pin[1]/scale - xdelta) ## ## &gt; yadd &lt;- 0.5*(pin[2]/scale - ydelta) ## ## &gt; plot(numeric(0), numeric(0), ## + xlim = range(x)+c(-1,1)*xadd, ylim = range(y)+c(-1,1)*yadd, ## + type = &quot;n&quot;, ann = FALSE) ## ## &gt; usr &lt;- par(&quot;usr&quot;) ## ## &gt; rect(usr[1], usr[3], usr[2], usr[4], col=&quot;green3&quot;) ## ## &gt; contour(x, y, volcano, levels = lev, col=&quot;yellow&quot;, lty=&quot;solid&quot;, add=TRUE) ## ## &gt; box() ## ## &gt; title(&quot;A Topographic Map of Maunga Whau&quot;, font= 4) ## ## &gt; title(xlab = &quot;Meters North&quot;, ylab = &quot;Meters West&quot;, font= 3) ## ## &gt; mtext(&quot;10 Meter Contour Spacing&quot;, side=3, line=0.35, outer=FALSE, ## + at = mean(par(&quot;usr&quot;)[1:2]), cex=0.7, font=3) ## ## &gt; ## Conditioning plots ## &gt; ## &gt; par(bg=&quot;cornsilk&quot;) ## ## &gt; coplot(lat ~ long | depth, data = quakes, pch = 21, bg = &quot;green3&quot;) ## ## &gt; par(opar) 4.3 ggplot2の考え方 ggplot2は、Rの中で最もポピュラーな描画packageです。最初は戸惑うかもしれませんが、論理でグラフを作る面白さを一緒に体験しましょう。 ggplot2はグラフを特定のパーツに分けてレイヤーとして作成し、それらを重ねて表現していきます。コマンドとしてはそれぞれのレイヤーを「足し算する」形でグラフを完成していきます。 下の例は最初のコマンドで、ggplot(A,aes(x=B,y=C))で、Aというデータセットを使って、x軸にB、y軸にCを使うグラフの基礎となるレイヤーを作ってね、という命令になります。 # install.packages(&quot;ggplot2&quot;) library(ggplot2) # データフレームの表示 head(midwest) ## # A tibble: 6 × 28 ## PID county state area poptotal popdensity popwhite popblack popamerindian popasian popother ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 561 ADAMS IL 0.052 66090 1271. 63917 1702 98 249 124 ## 2 562 ALEXA… IL 0.014 10626 759 7054 3496 19 48 9 ## 3 563 BOND IL 0.022 14991 681. 14477 429 35 16 34 ## 4 564 BOONE IL 0.017 30806 1812. 29344 127 46 150 1139 ## 5 565 BROWN IL 0.018 5836 324. 5264 547 14 5 6 ## 6 566 BUREAU IL 0.05 35688 714. 35157 50 65 195 221 ## # ℹ 17 more variables: percwhite &lt;dbl&gt;, percblack &lt;dbl&gt;, percamerindan &lt;dbl&gt;, percasian &lt;dbl&gt;, ## # percother &lt;dbl&gt;, popadults &lt;int&gt;, perchsd &lt;dbl&gt;, percollege &lt;dbl&gt;, percprof &lt;dbl&gt;, ## # poppovertyknown &lt;int&gt;, percpovertyknown &lt;dbl&gt;, percbelowpoverty &lt;dbl&gt;, ## # percchildbelowpovert &lt;dbl&gt;, percadultpoverty &lt;dbl&gt;, percelderlypoverty &lt;dbl&gt;, ## # inmetro &lt;int&gt;, category &lt;chr&gt; midewestはggplot2に付属しているデータベースで、アメリカ中西部の５つの州(IL, IN, MI, OH,WI)のサンプルデータが保存してあります。 ggplot(data=midwest, aes(x=percollege,y=percadultpoverty)) 結果は上記のようになります。この例では、横軸が各カウンティの大卒割合、縦軸が、貧困割合を示しています。 データそのものは、どうやってプロットするか、を命令しないと描かれません。どうやってとは、棒グラフにするのか、折れ線グラフにするのか、円グラフにするのか、といった見た目の問題です。このどうやっての部分は、geom_XXX()という関数群で指定します。例えば、散布図を作成する場合は、geom_point()となります。 ggplot(data=midwest)+ geom_point(aes(x=percollege,y=percadultpoverty)) デフォルトでは、軸の名称に変数の名前が入るので、これをわかりやすい文言に変更してみましょう。また、タイトルも加えてみます。 ggplot(data=midwest)+ geom_point(aes(x=percollege,y=percadultpoverty))+ theme_gray (base_family = &quot;HiraKakuPro-W3&quot;)+ # 日本語表示のために必要 xlab(&quot;各カウンティにおける大卒の割合 (%)&quot;)+ ylab(&quot;貧困の割合 (%)&quot;)+ ggtitle(&quot;アメリカ中西部５州の現状&quot;)+theme_bw() geom_point()のaes()でcolor=XXXと設定することでXXX変数を用いて色分けをすることができます。stateという変数で州の名前が格納されているので、この情報を使って州別に色分けしてみましょう。 ggplot(data=midwest)+ geom_point(aes(x=percollege,y=percadultpoverty,color=state))+ theme_gray (base_family = &quot;HiraKakuPro-W3&quot;)+ # 日本語表示のために必要 xlab(&quot;各カウンティにおける大卒の割合 (%)&quot;)+ ylab(&quot;貧困の割合 (%)&quot;)+ ggtitle(&quot;アメリカ中西部５州の現状&quot;)+theme_bw() あるいはfacet_grid()関数で州別に分割することも可能です。 # 横方向への分割 ggplot(data=midwest)+ geom_point(aes(x=percollege,y=percadultpoverty))+ facet_grid(. ~ state)+ # stateでグラフを分割 (横方向) theme_gray (base_family = &quot;HiraKakuPro-W3&quot;)+ # 日本語表示のために必要 xlab(&quot;各カウンティにおける大卒の割合 (%)&quot;)+ ylab(&quot;貧困の割合 (%)&quot;)+ ggtitle(&quot;アメリカ中西部５州の現状&quot;)+theme_bw() # 縦方向への分割 ggplot(data=midwest)+ geom_point(aes(x=percollege,y=percadultpoverty))+ facet_grid(state ~.)+ # stateでグラフを分割 (縦方向) theme_gray (base_family = &quot;HiraKakuPro-W3&quot;)+ # 日本語表示のために必要 xlab(&quot;各カウンティにおける大卒の割合 (%)&quot;)+ ylab(&quot;貧困の割合 (%)&quot;)+ ggtitle(&quot;アメリカ中西部５州の現状&quot;)+theme_bw() 代表的なgeom_XXX関数は以下の通りです。 関数名 内容 geom_point() 散布図のように点を描画 geom_line() 折れ線グラフを描画 geom_smooth() データのトレンド線を描画 geom_col() 棒グラフの描画 geom_polygon() 長方形など任意の形状のオブジェクトの描画 geom_sf() 空間情報を持つオブジェクトの描画 例えば、棒グラフは以下のように描写できる。 ggplot(midwest)+ geom_col(aes(x=state,y=poptotal))+ theme_gray (base_family = &quot;HiraKakuPro-W3&quot;)+ # 日本語表示のために必要 xlab(&quot;州名&quot;)+ylab(&quot;州全体の人口&quot;)+theme_bw() データでは、各州のカウンティレベルでの人口が入っているが自動的に合計されていることに注意。 人口の軸表示がe+06などとなっていますが、これは学術的な標記で\\(10^6\\)を意味しています。これをより一般にわかりやすい標記に変更します。 ここでは、scalesというpackageのlabel_number()関数を使って変更していますが、元のデータの単位を変更する(=1,000,000で割るなど)しても同じです。 また、もう一つの機能として軸を入れ替えるcoord_flip()関数も紹介しています。 #install.packages(&quot;scales&quot;) library(scales) ggplot(midwest)+ geom_col(aes(x=state,y=poptotal))+ theme_gray (base_family = &quot;HiraKakuPro-W3&quot;)+ # 日本語表示のために必要 scale_y_continuous(labels = label_number(suffix = &quot;&quot;, scale = 1e-6))+ xlab(&quot;州名&quot;)+ylab(&quot;州全体の人口 (単位：百万人)&quot;)+ coord_flip()+theme_bw() label_number()関数のsuffixというオプションは添字という意味で上の例では空欄としていますが任意の文字列を入れることも可能です。例えば百万を意味するmillionから頭文字をとって、Mを追記することが可能です。 また、fill=\"XXXでグラフの色を変更しました。aes()の外で設定している点に注意してください。 #install.packages(&quot;scales&quot;) library(scales) ggplot(midwest)+ geom_col(aes(x=state,y=poptotal), fill=&quot;royalblue&quot;)+ theme_gray (base_family = &quot;HiraKakuPro-W3&quot;)+ # 日本語表示のために必要 scale_y_continuous(labels = label_number(suffix = &quot; M&quot;, scale = 1e-6))+ xlab(&quot;州名&quot;)+ylab(&quot;州全体の人口&quot;)+ coord_flip()+theme_bw() aes()の中でfill=XXXを実行した場合、XXXの値によって色分けをすることができます。以下の例では、inmetroという変数で色分けをしています。この変数は、あるカウンティがmetro areaに属していれば１、そうでなければ０をとる変数です。このような変数をダミー変数と呼びます。metro areaは日本でいう人口密度が一定以上のエリアのことで、いわゆる都市化されているエリアと考えてもらえれば良いと思います。 ggplot(midwest)+ geom_col(aes(x=state,y=poptotal,fill=factor(inmetro)))+ theme_gray (base_family = &quot;HiraKakuPro-W3&quot;)+ # 日本語表示のために必要 scale_y_continuous(labels = label_number(suffix = &quot;&quot;, scale = 1e-6))+ xlab(&quot;州名&quot;)+ylab(&quot;州全体の人口 (単位：百万人)&quot;)+theme_bw() labs(fill=&quot;metro areaダミー&quot;) # 凡例のタイトルを変更している ## $fill ## [1] &quot;metro areaダミー&quot; ## ## attr(,&quot;class&quot;) ## [1] &quot;labels&quot; ggplot2には数多くの機能があります。そしてこの機能は日々進化しています。もし、グラフをこのように変更したい、というアイディアが何かあったらまずはgoogle検索してみてください。最初は適切な検索ワードが見つけられずに苦労するかもしれませんが、慣れてくるとかなりの確率で答えが見つかると思います。場合によっては、自分がイメージしていた可視化よりも優れたアイディアに出会えることもあると思います。 最終的なアウトプットの完成度を高めることが最初の目標ですが、その後はその過程の効率化にも目を向けてみてください。自分のスタイルを確立することができたら、それに至る時間を短縮するための様々な方法がggplot2あるいはRには用意されています。 4.4 ggplot2の事例 以下は、このサイトから引用した例です。講義では触れませんが、使いたいものがあれば是非試してみてください。 4.4.1 バブルチャート #Source:http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html data(mpg, package=&quot;ggplot2&quot;) # mpg &lt;- read.csv(&quot;http://goo.gl/uEeRGu&quot;) mpg_select &lt;- mpg[mpg$manufacturer %in% c(&quot;audi&quot;, &quot;ford&quot;, &quot;honda&quot;, &quot;hyundai&quot;), ] # Scatterplot theme_set(theme_bw()) # pre-set the bw theme. g &lt;- ggplot(mpg_select, aes(displ, cty)) + labs(subtitle=&quot;mpg: Displacement vs City Mileage&quot;, title=&quot;Bubble chart&quot;) g + geom_jitter(aes(col=manufacturer, size=hwy)) + geom_smooth(aes(col=manufacturer), method=&quot;lm&quot;, se=F) ## `geom_smooth()` using formula = &#39;y ~ x&#39; 4.4.2 ロリポップチャート #Source:http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html theme_set(theme_bw()) # Prepare data: group mean city mileage by manufacturer. cty_mpg &lt;- aggregate(mpg$cty, by=list(mpg$manufacturer), FUN=mean) # aggregate colnames(cty_mpg) &lt;- c(&quot;make&quot;, &quot;mileage&quot;) # change column names cty_mpg &lt;- cty_mpg[order(cty_mpg$mileage), ] # sort cty_mpg$make &lt;- factor(cty_mpg$make, levels = cty_mpg$make) # to retain the order in plot. head(cty_mpg, 4) ## make mileage ## 9 lincoln 11 ## 8 land rover 12 ## 3 dodge 13 ## 10 mercury 13 # Plot ggplot(cty_mpg, aes(x=make, y=mileage)) + geom_point(size=3) + geom_segment(aes(x=make, xend=make, y=0, yend=mileage)) + labs(title=&quot;Lollipop Chart&quot;, subtitle=&quot;Make Vs Avg. Mileage&quot;, caption=&quot;source: mpg&quot;) + theme(axis.text.x = element_text(angle=65, vjust=0.6)) 4.4.3 ヒストグラム #Source:http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html theme_set(theme_classic()) # Histogram on a Continuous (Numeric) Variable g &lt;- ggplot(mpg, aes(displ)) + scale_fill_brewer(palette = &quot;Spectral&quot;) g + geom_histogram(aes(fill=class), binwidth = .1, col=&quot;black&quot;, size=.1) + # change binwidth labs(title=&quot;Histogram with Auto Binning&quot;, subtitle=&quot;Engine Displacement across Vehicle Classes&quot;) g + geom_histogram(aes(fill=class), bins=5, col=&quot;black&quot;, size=.1) + # change number of bins labs(title=&quot;Histogram with Fixed Bins&quot;, subtitle=&quot;Engine Displacement across Vehicle Classes&quot;) 4.4.4 ボックスプロット #Source:http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html theme_set(theme_bw()) # plot g &lt;- ggplot(mpg, aes(manufacturer, cty)) g + geom_boxplot() + geom_dotplot(binaxis=&#39;y&#39;, stackdir=&#39;center&#39;, dotsize = .5, fill=&quot;red&quot;) + theme(axis.text.x = element_text(angle=65, vjust=0.6)) + labs(title=&quot;Box plot + Dot plot&quot;, subtitle=&quot;City Mileage vs Class: Each dot represents 1 row in source data&quot;, caption=&quot;Source: mpg&quot;, x=&quot;Class of Vehicle&quot;, y=&quot;City Mileage&quot;) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. 4.4.5 時系列データ #Source:http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html #install.packages(&quot;forecast&quot;) library(forecast) theme_set(theme_classic()) # Subset data nottem_small &lt;- window(nottem, start=c(1920, 1), end=c(1925, 12)) # subset a smaller timewindow # Plot ggseasonplot(AirPassengers) + labs(title=&quot;Seasonal plot: International Airline Passengers&quot;) ggseasonplot(nottem_small) + labs(title=&quot;Seasonal plot: Air temperatures at Nottingham Castle&quot;) インターネットで検索すると、ggplot2の使い方はたくさん出てきます。以下にまとまって学習できるサイトの例をリンクしておきます。個々の問題もほとんどネットで解決できます。検索のコツをつかむまでが大変ですが、エラーメッセージをコピペして検索することから始めると良いと思います。 "],["chapter05.html", "chapter: 5 可視化(2)：ggplot2による地図作成 5.1 パレットの追加 (1) 5.2 パレットの追加 (2) 5.3 塗り分け地図の作成 5.4 よりGISライクな地図の作成 5.5 世界地図の活用 5.6 さらに学びたい人へ", " chapter: 5 可視化(2)：ggplot2による地図作成 空間的な広がりのあるデータを扱う際には、地図による可視化がデータの特徴を理解する上で大きな助けになります。グラフ描画に用いたggplot2を拡張することで様々な地図データを描画できることはRの魅力の一つです。 地図を使った描画には、位置情報の正確さをそれほど必要としない場合と地理的情報の精度が極めて情報な場合の２通りが考えられます。前者は、コロプレス図と呼ばれるいわゆる「白地図の塗り分け」のようなものが相当します。後者は、GISと呼ばれる地理情報科学の分野に近いケースで、「迷惑施設が県境付近に立地しやすい」という仮説を検証するなど、正確な地理情報が前提となる場合です。 5.1 パレットの追加 (1) Rの中で簡単に追加できる色の組み合わせを提供しているpackageにRColorBrewerがあります。慣れてきたらこのカラーパレットを参考にして色を変えてみても良いでしょう。 # install.packages(&quot;RColorBrewer&quot;) library(RColorBrewer) display.brewer.all() 5.2 パレットの追加 (2) 他にもRではさまざまなパレットがパッケージとして用意されています。たとえば、MetBrewerは、各パレットがニューヨークのメトロポリタン美術館の作品からヒントを得て作成されているものです。 # install.packages(&quot;MetBrewer&quot;) library(MetBrewer) # ゴッホその１（糸杉 Cypresses(1889) )のパレットの出力 met.brewer(name=&quot;VanGogh1&quot;, n=7, type=&quot;discrete&quot;) 上記はパレットの１例で、ゴッホの糸杉という作品にヒントを得ているパレットです。その他のパレットの詳細はパッケージの作者のウェブサイトで確認可能です。 5.3 塗り分け地図の作成 はじめに日本の塗り分け地図をなるべく簡単に作成する方法を学びます。NipponMapというpackageでは見やすさを重視して、海岸線など一部を単純化しています。都道府県別の塗り分けなどは地理情報の精度よりも見やすさを優先すべきです。 なお、left_join関数は、left_join(A,B, by=\"C\")であるとき、Cという列をキーにして、AにBの情報を追加する関数です。 #一回だけ以下のインストールが必要 #install.packages(c(&quot;NipponMap&quot;, &quot;tidyverse&quot;)) # ライブラリコマンドでの読み込みは毎回必要 library(readxl) library(NipponMap) library(sf) library(tidyverse) #ウェブサイトから直接ダウンロードする場合 myURL&lt;-&quot;https://yamamoto-masashi.github.io/DSlec/20201028sample.xls&quot; download.file(myURL,destfile=&quot;20201028sample.xls&quot;, mode = &quot;wb&quot;) # エクセルファイルの読み込み # ヘッダ部分を読み飛ばしている # sheet=1を変更することで別のシートも読める sampleDB &lt;- read_excel(&quot;20201028sample.xls&quot;,skip=5,sheet=1) ## New names: ## • `` -&gt; `...1` ## • `` -&gt; `...2` # 変数の対応関係 # A1101_総人口【人】 # A1301_15歳未満人口【人】 # A1303_65歳以上人口【人】 # B1101_ 総面積（北方地域及び竹島を除く）【ｈａ】 # B1103_ 可住地面積【ｈａ】 # B4107_ 雪日数（年間）【日】 # B4108_ 日照時間（年間）【時間】 # D110101_市町村数【‐】 # E6102_大学数【校】 # E6302_大学学生数【人】 # F610201_超過実労働時間数（男）【時間】 # F610202_超過実労働時間数（女）【時間】 # H110202_空き家数【戸】 # 列１と列２の名前を変更している。 names(sampleDB)[1:2]&lt;-c(&quot;prefcode&quot;,&quot;prefnameJ&quot;) # データと地図を結合する際にキーの型が同じ必要があるので # 数値型を文字型に変更している。 sampleDB$prefcode&lt;-as.character(sampleDB$prefcode) # 地図の情報はNipponMapから取り出しています。 # この方法は以下で教えていただきました。 # https://ill-identified.hatenablog.com/entry/2020/12/07/134705 Nippon_map &lt;- read_sf(system.file(&quot;shapes/jpn.shp&quot;, package = &quot;NipponMap&quot;)[1], crs = &quot;+proj=longlat +datum=WGS84&quot;) # 地図情報に総務省のデータベースを接続 mapDB&lt;-left_join(Nippon_map,sampleDB, by=c(&quot;SP_ID&quot;=&quot;prefcode&quot;)) # 地図にプロット ggplot(mapDB, aes(fill = B4107)) + geom_sf() + scale_fill_gradientn(colors=brewer.pal(9,&quot;GnBu&quot;))+ theme_gray (base_family = &quot;HiraKakuPro-W3&quot;)+ labs(fill = &quot;年間雪日数(日)&quot;)+ ggtitle(&quot;都道府県別の雪日数 (2018年)&quot;)+ theme_bw() スペースの都合や見やすさという点で北海道と沖縄県を移動する場合があります。そのような地図もRで作成することができます。なお、この作図は「ジオメトリの移動による日本地図の可視化」を参考にして作成しました。 annotate()関数を使って、始点と終点を与えることで線を引くことができるので、その機能を使って、北海道と沖縄県を区別する線を加えます。 #ジオメトリの直接変更 #北海道の都道府県番号は１、沖縄県は47。 Nippon_map$geometry[1]=Nippon_map$geometry[1]+c(-11, -4) Nippon_map$geometry[47]=Nippon_map$geometry[47]+c(12, 5) #日本地図の描写 ggplot()+ geom_sf(data=Nippon_map, aes(fill=population/10000))+ scale_fill_gradientn(colors=brewer.pal(9,&quot;GnBu&quot;))+ annotate(&quot;segment&quot;, x=129, xend=134.2, y=37, yend=37, color=&quot;gray&quot;, size=1)+ annotate(&quot;segment&quot;, x=134.2, xend=138.5, y=37, yend=41, color=&quot;gray&quot;, size=1)+ annotate(&quot;segment&quot;, x=139.8, xend=141, y=32.2, yend=32.2, color=&quot;gray&quot;, size=1)+ annotate(&quot;segment&quot;, x=138.5, xend=139.8, y=31, yend=32.2, color=&quot;gray&quot;, size=1)+ labs(fill=&quot;万人&quot;, x=&quot;&quot;, y=&quot;&quot;, caption=&quot;Nippomap&quot;)+ ggtitle(&quot;都道府県別人口&quot;)+ theme_bw() 5.4 よりGISライクな地図の作成 以下では地理情報をできるだけ正確に扱った地図の描画について解説します。例として用いるデータは、2020年国勢調査の横浜市（小地域）です。このファイルは、 総務省統計局 &gt;&gt; 小地域 &gt;&gt; 国勢調査 &gt;&gt; 2020年 小地域 &gt;&gt; 世界測地系緯度経度・Shapefile &gt;&gt; 神奈川県 &gt;&gt; 横浜市神奈川区 でダウンロードできます。ダウンロードしたファイルはzip形式なので解凍が必要です。以下の例では、解凍後にYokohamaKanagawaという名前にフォルダ名を変更しています。 地図情報のうち、ベクターデータは、シェープファイルという形式で利用することがデフォルトになっています。シェープファイルとは、Esri社が開発したGIS用のデータフォーマットで、ポイントデータ(1組以上の緯度、経度情報)、ラインデータ(2組のポイントデータを結んだものの集まり)、ポリゴンデータ(ラインデータを結んだもの)を格納できます。 シェープファイルの拡張子は、.shpですが、シェープファイルはこのファイル単独では動作しません。データをダウンロードするときはついてくる複数のファイル（最低でも３つはある）を全て同じフォルダに保存するようにしてください。 library(sf) # 横浜市神奈川区のシェープファイルを読み込む map &lt;- read_sf(&quot;YokohamaKanagawa/r2kb14102.shp&quot;, crs = &quot;+proj=longlat +datum=WGS84&quot;) # 表示 ggplot(map) + geom_sf()+ theme_bw() 各町丁・字等別の人口で塗り分けをしてみましょう。 ggplot(map) + geom_sf(aes(fill=JINKO))+ scale_fill_gradientn(colors=brewer.pal(9,&quot;GnBu&quot;))+ theme_bw (base_family = &quot;HiraKakuPro-W3&quot;)+ labs(fill = &quot;単位：人&quot;)+ ggtitle(&quot;国勢調査(2020年)における横浜市神奈川区の人口 (町丁・字等別)&quot;) さらに鉄道路線、大学の立地などを重ねてみましょう。 以下の例では、鉄道のデータを国土数値情報という国土交通省が運営しているウェブサイトからダウンロードして使っています。このサイトの「4.交通」の中にある「鉄道(ライン）」というデータを使用しています。なお年ごとに路線が変化しているため、国勢調査に合わせて2020年のデータを使用しています。 この鉄道データは全国のJR及び私鉄を全て含むので、このままプロットすると全国の全ての鉄道路線が表示されます。そのため平塚市の路線に限定する必要があります。 そこで使用しているが、st_intersectionという関数です。この関数を使うと二つの地理データに共通の部分だけを残すことができます。鉄道(ライン)データは駅の情報も含むため、駅も赤色で表示しています。 最後に神奈川大学の位置をannotate関数を使って神奈川大学の場所を、geom_text関数を使って、神奈川大学の名称を表示しました。これらの関数は緯度、経度を使って表示することができます。 trainline &lt;- read_sf(&quot;Train/N02-20_RailroadSection.shp&quot;, crs = &quot;+proj=longlat +datum=WGS84&quot;) # 鉄道線路網のシェープファイル trainstation &lt;- read_sf(&quot;Train/N02-20_Station.shp&quot;, crs = &quot;+proj=longlat +datum=WGS84&quot;) # 鉄道駅のシェープファイル # ポリゴンの頂点が重複していると新しいsfではエラーが出るので、 # s2をFALSEにしている # https://stackoverflow.com/questions/68808238/how-to-fix-spherical-geometry-errors-caused-by-conversion-from-geos-to-s2 sf_use_s2(FALSE) ggplot(map)+ geom_sf(aes(fill=JINKO))+ geom_sf(data=st_sf(geometry=st_intersection(st_union(map),st_union(trainline))), color=&quot;black&quot;,size=1)+ geom_sf(data=st_sf(geometry=st_intersection(st_union(map),st_union(trainstation))), color=&quot;red&quot;,size=1)+ annotate(&quot;point&quot;, x = 139.6150326, y = 35.4846314, colour = &quot;blue&quot;, size=2)+ geom_text(aes(x = 139.6150326, y = 35.4876314), label = &quot;神奈川大学&quot;, family = &quot;HiraKakuProN-W3&quot;)+ scale_fill_gradientn(colors=brewer.pal(9,&quot;GnBu&quot;))+ theme_bw (base_family = &quot;HiraKakuPro-W3&quot;)+ labs(fill = &quot;単位：人&quot;)+ xlab(&quot;経度&quot;)+ylab(&quot;緯度&quot;)+ ggtitle(&quot;国勢調査(2020年)における横浜市神奈川区の人口 (町丁・字等別)&quot;) 続いて、地価公示のデータをプロットしてみよう。地価公示の詳細はこちらをご覧ください。 地価公示とは、地価公示法に基づいて、国土交通省土地鑑定委員会が、適正な地価の 形成に寄与するために、毎年1月1日時点における標準地の正常な価格を3月に公示 (約26,000地点で実施）するもので、社会・経済活動についての制度インフラとなって います。 主な役割 1.一般の土地の取引に対して指標を与えること 2.不動産鑑定の規準となること 3.公共事業用地の取得価格算定の規準となること 4.土地の相続評価および固定資産税評価についての基準となること 5.国土利用計画法による土地の価格審査の規準となること  等 位置情報のついた地価公示のデータは 国土数値情報 &gt;&gt; 1. 国土 &gt;&gt; 地価公示 (ポイント) &gt;&gt; 神奈川県 &gt;&gt; 令和7年 にアクセスすると入手できる。 以下では、地価の動向をみるために、より大きなスケールで可視化を行いたいので、ベースマップを横浜市神奈川区から神奈川県に変更する。 #地価公示(令和7年) KanagawaPrice&lt;-read_sf(&quot;L01-25_14_GML/L01-25_14.shp&quot;) #地価を整数型に KanagawaPrice$price&lt;-as.integer(KanagawaPrice$L01_006) # 用途が住宅のもののみに KanagawaPrice %&gt;% filter(L01_028==&quot;住宅&quot;) -&gt; KanagawaPriceHome #神奈川県の行政界 (2024年) KanaSHP&lt;-read_sf(&quot;N03-20240101_14_GML/N03-20240101_14.shp&quot;, crs = &quot;+proj=longlat +datum=WGS84&quot;) # 神奈川県のシェープファイル ggplot() + geom_sf(data=KanaSHP,fill=&quot;white&quot;)+ geom_sf(data=st_sf(geometry=st_intersection(st_union(KanaSHP),st_union(trainline))), color=&quot;darkgray&quot;,size=0.5)+ geom_sf(data=st_sf(geometry=st_intersection(st_union(KanaSHP),st_union(trainstation))), color=&quot;red&quot;,size=0.5)+ geom_sf(data=KanagawaPriceHome,aes(color = price/1000),size=0.2)+ scale_color_gradientn(colors=brewer.pal(7,&quot;GnBu&quot;))+ theme_bw(base_family = &quot;HiraKakuPro-W3&quot;)+ labs(color = &quot;単位：千円/m^2&quot;)+ ggtitle(&quot;神奈川県の地価公示(令和7年)&quot;) これをさらにヒートマップの形で表してみよう。 #install.packages(&quot;akima&quot;) library(akima) # sf objectから緯度経度を取り出す KanaCoords&lt;-st_coordinates(KanagawaPrice$geometry) # XおよびYとして緯度経度を追加する（もっと美しいやり方あると思いますが） KanaPrice&lt;-cbind(KanagawaPrice,KanaCoords) # ポイントデータを補間する interpdf &lt;-interp2xyz(interp(x=KanaPrice$X, y=KanaPrice$Y, z=KanaPrice$price/1000, duplicate=&quot;mean&quot;), data.frame=TRUE) interpdf %&gt;% filter(!is.na(z)) %&gt;% tbl_df() %&gt;% ggplot() + geom_sf(data=KanaSHP)+ geom_contour(aes(x = x, y = y, z = z),color = &quot;white&quot;, alpha = 1) + geom_tile(aes(x = x, y = y, z = z, fill = z,alpha=0.5)) + scale_fill_distiller(palette=&quot;Spectral&quot;, na.value=&quot;white&quot;) + theme_bw(base_family = &quot;HiraKakuPro-W3&quot;)+ labs(fill=&quot;単位：千円/m^2&quot;)+ guides(alpha=FALSE)+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ ggtitle(&quot;神奈川県の地価公示(令和7年)&quot;)-&gt;p print(p) 次に二つの地図を１枚の図としてプロットしてみよう。 使用するデータは一般廃棄物処理の施設立地のデータで以下でダウンロードできる。 国土数値情報 &gt;&gt; 3. 地域 &gt;&gt; 廃棄物処理施設 (ポイント) &gt;&gt; 神奈川県(平成24年) はじめにそれぞれの地図を作成する。 library(cowplot) setwd(&quot;~/R/bookdown/datalecture2025/&quot;) # 産業廃棄物のデータの読み込み KanaIndWaste&lt;-read_sf(&quot;P15-12_14_GML/P15-12_14_IndustrialWasteDisposalFacilities.shp&quot;, options = c(&quot;encoding=CP932&quot;), crs=&quot;WGS84&quot;) # 一般廃棄物のデータの読み込み KanaMswWaste&lt;-read_sf(&quot;P15-12_14_GML/P15-12_14_GeneralWasteDisposalFacilities.shp&quot;, options = c(&quot;encoding=CP932&quot;), crs=&quot;WGS84&quot;) #横浜市の選択 KanaSHP |&gt; filter(N03_004 ==&quot;横浜市&quot;)-&gt; YokohamaMap #湘南地域の可視化 ggplot()+ geom_sf(data=KanaSHP, size=0.1)+ geom_sf(data=YokohamaMap,size=0.1,fill=&quot;white&quot;)+ theme(axis.ticks = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())-&gt;ggm1 ggm1 #横浜市の一般廃棄物処理施設の取り出し KanaMswWaste %&gt;% filter(P15_002 ==&quot;横浜市&quot;) -&gt; YokohamaMswMap #施設の可視化 ggplot()+ geom_sf(data=YokohamaMap,fill=&quot;white&quot;)+ geom_sf(data=YokohamaMswMap,size=1,color=&quot;red&quot;)+ theme_bw (base_family = &quot;HiraKakuPro-W3&quot;)+ annotate(&quot;point&quot;, x = 139.6150326, y = 35.4846314, colour = &quot;blue&quot;, size=2)+ geom_text(aes(x = 139.6150326, y = 35.4946314), label = &quot;神奈川大学&quot;, family = &quot;HiraKakuProN-W3&quot;)+ ggtitle(&quot;横浜市の一般廃棄物処理施設&quot;)-&gt;ggm2 ggm2 この地図をみると廃棄物処理施設は、区の境界に近い場所に立地しているようにもみえる。皆さんはどう思うだろうか？ 5.5 世界地図の活用 Natural Earthというサイトに世界の地図データが無料でダウンロード可能である。以下では、rnaturalearthというpackageを使って、世界地図を描写する方法を紹介する。 # はじめにこの二つのインストールが必要 #install.packages(&quot;rnaturalearth&quot;) # install.packages(&quot;rnaturalearthdata&quot;) library(sf) library(tidyverse) library(rnaturalearth) #Natural Earth World_map&lt;- ne_countries(scale=&quot;medium&quot;, returnclass=&quot;sf&quot;) ggplot()+ geom_sf(data=World_map) #最初の6行 World_map %&gt;% head() ## Simple feature collection with 6 features and 168 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -73 ymin: -22 xmax: 110 ymax: 42 ## Geodetic CRS: WGS 84 ## featurecla scalerank labelrank sovereignt sov_a3 adm0_dif level type tlc ## 1 Admin-0 country 1 3 Zimbabwe ZWE 0 2 Sovereign country 1 ## 2 Admin-0 country 1 3 Zambia ZMB 0 2 Sovereign country 1 ## 3 Admin-0 country 1 3 Yemen YEM 0 2 Sovereign country 1 ## 4 Admin-0 country 3 2 Vietnam VNM 0 2 Sovereign country 1 ## 5 Admin-0 country 5 3 Venezuela VEN 0 2 Sovereign country 1 ## admin adm0_a3 geou_dif geounit gu_a3 su_dif subunit su_a3 brk_diff name ## 1 Zimbabwe ZWE 0 Zimbabwe ZWE 0 Zimbabwe ZWE 0 Zimbabwe ## 2 Zambia ZMB 0 Zambia ZMB 0 Zambia ZMB 0 Zambia ## 3 Yemen YEM 0 Yemen YEM 0 Yemen YEM 0 Yemen ## 4 Vietnam VNM 0 Vietnam VNM 0 Vietnam VNM 0 Vietnam ## 5 Venezuela VEN 0 Venezuela VEN 0 Venezuela VEN 0 Venezuela ## name_long brk_a3 brk_name brk_group abbrev postal formal_en ## 1 Zimbabwe ZWE Zimbabwe &lt;NA&gt; Zimb. ZW Republic of Zimbabwe ## 2 Zambia ZMB Zambia &lt;NA&gt; Zambia ZM Republic of Zambia ## 3 Yemen YEM Yemen &lt;NA&gt; Yem. YE Republic of Yemen ## 4 Vietnam VNM Vietnam &lt;NA&gt; Viet. VN Socialist Republic of Vietnam ## 5 Venezuela VEN Venezuela &lt;NA&gt; Ven. VE Bolivarian Republic of Venezuela ## formal_fr name_ciawf note_adm0 note_brk name_sort name_alt ## 1 &lt;NA&gt; Zimbabwe &lt;NA&gt; &lt;NA&gt; Zimbabwe &lt;NA&gt; ## 2 &lt;NA&gt; Zambia &lt;NA&gt; &lt;NA&gt; Zambia &lt;NA&gt; ## 3 &lt;NA&gt; Yemen &lt;NA&gt; &lt;NA&gt; Yemen, Rep. &lt;NA&gt; ## 4 &lt;NA&gt; Vietnam &lt;NA&gt; &lt;NA&gt; Vietnam &lt;NA&gt; ## 5 República Bolivariana de Venezuela Venezuela &lt;NA&gt; &lt;NA&gt; Venezuela, RB &lt;NA&gt; ## mapcolor7 mapcolor8 mapcolor9 mapcolor13 pop_est pop_rank pop_year gdp_md gdp_year ## 1 1 5 3 9 1.5e+07 14 2019 21440 2019 ## 2 5 8 5 13 1.8e+07 14 2019 23309 2019 ## 3 5 3 3 11 2.9e+07 15 2019 22581 2019 ## 4 5 6 5 4 9.6e+07 16 2019 261921 2019 ## 5 1 3 1 4 2.9e+07 15 2019 482359 2014 ## economy income_grp fips_10 iso_a2 iso_a2_eh iso_a3 iso_a3_eh ## 1 5. Emerging region: G20 5. Low income ZI ZW ZW ZWE ZWE ## 2 7. Least developed region 4. Lower middle income ZA ZM ZM ZMB ZMB ## 3 7. Least developed region 4. Lower middle income YM YE YE YEM YEM ## 4 5. Emerging region: G20 4. Lower middle income VM VN VN VNM VNM ## 5 5. Emerging region: G20 3. Upper middle income VE VE VE VEN VEN ## iso_n3 iso_n3_eh un_a3 wb_a2 wb_a3 woe_id woe_id_eh woe_note adm0_iso ## 1 716 716 716 ZW ZWE 23425004 23425004 Exact WOE match as country ZWE ## 2 894 894 894 ZM ZMB 23425003 23425003 Exact WOE match as country ZMB ## 3 887 887 887 RY YEM 23425002 23425002 Exact WOE match as country YEM ## 4 704 704 704 VN VNM 23424984 23424984 Exact WOE match as country VNM ## 5 862 862 862 VE VEN 23424982 23424982 Exact WOE match as country VEN ## adm0_diff adm0_tlc adm0_a3_us adm0_a3_fr adm0_a3_ru adm0_a3_es adm0_a3_cn adm0_a3_tw ## 1 &lt;NA&gt; ZWE ZWE ZWE ZWE ZWE ZWE ZWE ## 2 &lt;NA&gt; ZMB ZMB ZMB ZMB ZMB ZMB ZMB ## 3 &lt;NA&gt; YEM YEM YEM YEM YEM YEM YEM ## 4 &lt;NA&gt; VNM VNM VNM VNM VNM VNM VNM ## 5 &lt;NA&gt; VEN VEN VEN VEN VEN VEN VEN ## adm0_a3_in adm0_a3_np adm0_a3_pk adm0_a3_de adm0_a3_gb adm0_a3_br adm0_a3_il adm0_a3_ps ## 1 ZWE ZWE ZWE ZWE ZWE ZWE ZWE ZWE ## 2 ZMB ZMB ZMB ZMB ZMB ZMB ZMB ZMB ## 3 YEM YEM YEM YEM YEM YEM YEM YEM ## 4 VNM VNM VNM VNM VNM VNM VNM VNM ## 5 VEN VEN VEN VEN VEN VEN VEN VEN ## adm0_a3_sa adm0_a3_eg adm0_a3_ma adm0_a3_pt adm0_a3_ar adm0_a3_jp adm0_a3_ko adm0_a3_vn ## 1 ZWE ZWE ZWE ZWE ZWE ZWE ZWE ZWE ## 2 ZMB ZMB ZMB ZMB ZMB ZMB ZMB ZMB ## 3 YEM YEM YEM YEM YEM YEM YEM YEM ## 4 VNM VNM VNM VNM VNM VNM VNM VNM ## 5 VEN VEN VEN VEN VEN VEN VEN VEN ## adm0_a3_tr adm0_a3_id adm0_a3_pl adm0_a3_gr adm0_a3_it adm0_a3_nl adm0_a3_se adm0_a3_bd ## 1 ZWE ZWE ZWE ZWE ZWE ZWE ZWE ZWE ## 2 ZMB ZMB ZMB ZMB ZMB ZMB ZMB ZMB ## 3 YEM YEM YEM YEM YEM YEM YEM YEM ## 4 VNM VNM VNM VNM VNM VNM VNM VNM ## 5 VEN VEN VEN VEN VEN VEN VEN VEN ## adm0_a3_ua adm0_a3_un adm0_a3_wb continent region_un subregion ## 1 ZWE -99 -99 Africa Africa Eastern Africa ## 2 ZMB -99 -99 Africa Africa Eastern Africa ## 3 YEM -99 -99 Asia Asia Western Asia ## 4 VNM -99 -99 Asia Asia South-Eastern Asia ## 5 VEN -99 -99 South America Americas South America ## region_wb name_len long_len abbrev_len tiny homepart min_zoom min_label ## 1 Sub-Saharan Africa 8 8 5 -99 1 0 2.5 ## 2 Sub-Saharan Africa 6 6 6 -99 1 0 3.0 ## 3 Middle East &amp; North Africa 5 5 4 -99 1 0 3.0 ## 4 East Asia &amp; Pacific 7 7 5 2 1 0 2.0 ## 5 Latin America &amp; Caribbean 9 9 4 -99 1 0 2.5 ## max_label label_x label_y ne_id wikidataid name_ar name_bn name_de name_en name_es ## 1 8.0 30 -18.9 1.2e+09 Q954 زيمبابوي জিম্বাবুয়ে Simbabwe Zimbabwe Zimbabue ## 2 8.0 26 -14.7 1.2e+09 Q953 زامبيا জাম্বিয়া Sambia Zambia Zambia ## 3 8.0 46 15.3 1.2e+09 Q805 اليمن ইয়েমেন Jemen Yemen Yemen ## 4 7.0 105 21.7 1.2e+09 Q881 فيتنام ভিয়েতনাম Vietnam Vietnam Vietnam ## 5 7.5 -65 7.2 1.2e+09 Q717 فنزويلا ভেনেজুয়েলা Venezuela Venezuela Venezuela ## name_fa name_fr name_el name_he name_hi name_hu name_id name_it name_ja ## 1 زیمبابوه Zimbabwe Ζιμπάμπουε זימבבואה ज़िम्बाब्वे Zimbabwe Zimbabwe Zimbabwe ジンバブエ ## 2 زامبیا Zambie Ζάμπια זמביה ज़ाम्बिया Zambia Zambia Zambia ザンビア ## 3 یمن Yémen Υεμένη תימן यमन Jemen Yaman Yemen イエメン ## 4 ویتنام Viêt Nam Βιετνάμ וייטנאם वियतनाम Vietnám Vietnam Vietnam ベトナム ## 5 ونزوئلا Venezuela Βενεζουέλα ונצואלה वेनेज़ुएला Venezuela Venezuela Venezuela ベネズエラ ## name_ko name_nl name_pl name_pt name_ru name_sv name_tr name_uk name_ur ## 1 짐바브웨 Zimbabwe Zimbabwe Zimbábue Зимбабве Zimbabwe Zimbabve Зімбабве زمبابوے ## 2 잠비아 Zambia Zambia Zâmbia Замбия Zambia Zambiya Замбія زیمبیا ## 3 예멘 Jemen Jemen Iémen Йемен Jemen Yemen Ємен یمن ## 4 베트남 Vietnam Wietnam Vietname Вьетнам Vietnam Vietnam В&#39;єтнам ویتنام ## 5 베네수엘라 Venezuela Wenezuela Venezuela Венесуэла Venezuela Venezuela Венесуела وینیزویلا ## name_vi name_zh name_zht fclass_iso tlc_diff fclass_tlc fclass_us fclass_fr ## 1 Zimbabwe 津巴布韦 辛巴威 Admin-0 country &lt;NA&gt; Admin-0 country &lt;NA&gt; &lt;NA&gt; ## 2 Zambia 赞比亚 尚比亞 Admin-0 country &lt;NA&gt; Admin-0 country &lt;NA&gt; &lt;NA&gt; ## 3 Yemen 也门 葉門 Admin-0 country &lt;NA&gt; Admin-0 country &lt;NA&gt; &lt;NA&gt; ## 4 Việt Nam 越南 越南 Admin-0 country &lt;NA&gt; Admin-0 country &lt;NA&gt; &lt;NA&gt; ## 5 Venezuela 委内瑞拉 委內瑞拉 Admin-0 country &lt;NA&gt; Admin-0 country &lt;NA&gt; &lt;NA&gt; ## fclass_ru fclass_es fclass_cn fclass_tw fclass_in fclass_np fclass_pk fclass_de fclass_gb ## 1 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 2 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 3 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 5 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## fclass_br fclass_il fclass_ps fclass_sa fclass_eg fclass_ma fclass_pt fclass_ar fclass_jp ## 1 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 2 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 3 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 5 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## fclass_ko fclass_vn fclass_tr fclass_id fclass_pl fclass_gr fclass_it fclass_nl fclass_se ## 1 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 2 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 3 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 5 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## fclass_bd fclass_ua geometry ## 1 &lt;NA&gt; &lt;NA&gt; MULTIPOLYGON (((31 -22, 31 ... ## 2 &lt;NA&gt; &lt;NA&gt; MULTIPOLYGON (((30 -16, 30 ... ## 3 &lt;NA&gt; &lt;NA&gt; MULTIPOLYGON (((53 17, 53 1... ## 4 &lt;NA&gt; &lt;NA&gt; MULTIPOLYGON (((104 10, 104... ## 5 &lt;NA&gt; &lt;NA&gt; MULTIPOLYGON (((-61 9.1, -6... ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 1 rows ] 5.5.1 世界地図を利用した可視化 所得階層別の塗り分け ggplot()+ geom_sf(data=World_map, aes(fill=income_grp), color=&quot;white&quot;, size=0.001)+ labs(fill=&quot;所得グループ&quot;, caption=&quot;出典：Natural Earth&quot;)+ ggtitle(&quot;世界の所得分布&quot;)+ theme_gray(base_family = &quot;HiraKakuPro-W3&quot;)+ theme(legend.position=&quot;bottom&quot;)+ guides(fill=guide_legend(nrow=2))+theme_bw() 世界地図に用いられる投影法の1つであるロビンソン図法（Robinson projection）を用いた可視化。 ggplot()+ geom_sf(data=World_map, aes(fill=income_grp), color=&quot;white&quot;, size=0.001)+ scale_fill_brewer(palette = &quot;PuBu&quot;,direction=-1)+ # direction=-1でパレットが逆順に labs(fill=&quot;所得グループ&quot;, caption=&quot;出典：Natural Earth&quot;)+ ggtitle(&quot;世界の所得分布（ロビンソン図法）&quot;)+ theme_gray(base_family = &quot;HiraKakuPro-W3&quot;)+ coord_sf(crs=st_crs(&quot;ESRI:54030&quot;))+ theme(legend.position=&quot;bottom&quot;)+ guides(fill=guide_legend(nrow=2))+theme_bw() 5.5.2 世界銀行データの可視化 世界銀行の公開データは、World Bank Open Dataというサイトでアクセスできる。このサイトを眺めるだけでも多くの情報を得ることができるので、開発問題に興味がある場合はアクセスしてみよう。このサイトの情報は膨大であるため、WDIというpackageを用いてデータにアクセスするのが効率的である。 なお、自分が探しているindicatorのIDを探す場合は、このサイトを参照のこと。 #install.packages(&quot;WDI&quot;) library(WDI) #使用する指標 CO2perGDP&lt;- WDI(indicator=&quot;EN.GHG.CO2.RT.GDP.KD&quot;, extra=TRUE, start=2015, end=2015) #列名の変更 CO2perGDP %&gt;% rename(CO2pg=EN.GHG.CO2.RT.GDP.KD) -&gt; CO2perGDP #地図データと世界銀行データの結合 CO2pGDP_map&lt;- left_join(World_map, CO2perGDP, by=c(&quot;iso_a3&quot;=&quot;iso3c&quot;)) #南極大陸削除(好み) CO2pGDP_map %&gt;% filter(iso_a3!=&quot;ATA&quot;) -&gt; CO2pGDP_map #地図の描写 ggplot()+ geom_sf(data=CO2pGDP_map, aes(fill=CO2pg), color=&quot;white&quot;, size=0.001)+ scale_fill_gradientn(colors=brewer.pal(5,&quot;PuBu&quot;))+ labs(fill=&quot;kg CO2e/USD&quot;, caption=&quot;出典：Natural Earth, The World Bank&quot;)+ ggtitle(&quot;GDPあたりCO2排出量（2015年USD）&quot;)+ coord_sf(crs=st_crs(&quot;ESRI:54030&quot;))+ theme_bw(base_family = &quot;HiraKakuPro-W3&quot;)+ theme(legend.position=&quot;bottom&quot;)+theme_bw() 5.6 さらに学びたい人へ このチャプターの内容の多くは、Rによる地理空間データの可視化を参照しています。このサイトではこの他にもたくさんの美しい地図の作成方法が解説されていますので、地図を用いた分析を行いたい場合は必ず確認しましょう。 また、ここに特定の市町村を選んで、さらに分析を加えた例を掲載しています。地域の分析に興味のある人は試してみてください。 "],["chapter06.html", "chapter: 6 可視化(3)：貿易統計の可視化 6.1 貿易統計とは 6.2 データの読み込み 6.3 りんごの輸出データの可視化", " chapter: 6 可視化(3)：貿易統計の可視化 ggplot2による可視化の応用編として、日本の貿易統計の可視化を行います。以下では、「りんご」の輸出を例に解説します。 # ライブラリコマンドでの読み込みは毎回必要 library(tidyverse) library(readxl) library(lubridate) library(MetBrewer) library(patchwork) #ウィンドウズユーザー向けの日本語フォント #windowsFonts(YuGothic = windowsFont(&quot;Yu Gothic&quot;)) #theme_set(theme_gray(base_size = 10, base_family = &quot;YuGothic&quot;)) 6.1 貿易統計とは 財務省によると、貿易統計とは、「貿易統計は、経済統計に関する国際条約及び関税法に基づき、我が国の貿易の実態を正確に把握し各国の外国貿易との比較を容易にすることにより、国や公共機関の経済政策、私企業の経済活動の資料に資することを目的に作成、公表及び閲覧されるもの」とされています。 国際貿易では、あらゆる物品が取引されるため、これらを効率的に分類するための世界共通のコードが不可欠です。貿易される物品を統計品目表の該当する箇所に当てはめる作業は品目分類と呼ばれています。 代表的な品目分類のコードがHS品目表です。これは国際条約に基づくコードで、日本をはじめ160カ国・地域が加盟しています。HS品目表は、貿易統計のためのデータ収集のほか、関税率の設定などさまざまな用途で利用されています。 品目分類は、ここで検索できます。 6.2 データの読み込み # 変数の対応関係 # Year --&gt; 年 # Month --&gt; 月 # Quantity2 --&gt; 輸出されたりんごの量 (単位:トン) # Value --&gt;輸出されたりんごの金額 (単位:千円) # sumPrice ---&gt; 金額を量で割ったもの (価格と考える) #ウェブサイトから直接ダウンロードする場合 url2&lt;-&quot;https://yamamoto-masashi.github.io/DSlec/DBappleAll.xlsx&quot; download.file(url2,destfile=&quot;DBappleAll.xlsx&quot;) # エクセルファイルの読み込み # ヘッダ部分を読み飛ばしている # sheet=1を変更することで別のシートも読める DBappleAll&lt;-read_excel(&quot;DBappleAll.xlsx&quot;,sheet=1) このままでは月名が日付として認識されないので工夫する。 #年と日を補って文字列にする DBappleAll$date_str &lt;- paste(DBappleAll$Year, DBappleAll$Month, &quot;1&quot;) # lubridateのymd関数でDateに変換 DBappleAll$date &lt;- ymd(DBappleAll$date_str) # labelオプションで英単語での取り出し DBappleAll$Month&lt;-month(DBappleAll$date,label = TRUE, abbr = TRUE) 6.3 りんごの輸出データの可視化 2015年から2024年のりんごの輸出金額は以下のとおりです。 # 価値 DBappleAll |&gt; ggplot()+ geom_line(aes(x=Month,y=Value/1000, color=factor(Year),group=factor(Year)))+ theme_gray(base_family = &quot;HiraKakuPro-W3&quot;)+ ylab(&quot;単位: 100万円&quot;)+xlab(&quot;&quot;)+ scale_color_manual(values=met.brewer(&quot;VanGogh2&quot;, 10))+ labs(color=&quot;&quot;)+ggtitle(&quot;りんごの輸出金額&quot;)+ theme_bw()-&gt;g1 g1 次に輸出量を可視化する。年末年始に輸出量が増加している傾向がみてとれる。 # 量 DBappleAll |&gt; ggplot()+ geom_line(aes(x=Month,y=Quantity2/1000, color=factor(Year),group=factor(Year)))+ theme_gray(base_family = &quot;HiraKakuPro-W3&quot;)+ ylab(&quot;輸出量 (単位:千トン)&quot;)+xlab(&quot;&quot;)+ scale_color_manual(values=met.brewer(&quot;VanGogh2&quot;, 10))+ labs(color=&quot;&quot;)+ggtitle(&quot;りんごの輸出量&quot;)+ theme_bw()-&gt;g2 g2 続いて価格を可視化する。これをみると、りんごの輸出価格は少しずつ上昇していることがわかる。 # 価格 DBappleAll |&gt; ggplot()+ geom_line(aes(x=Month,y=sumPrice, color=factor(Year),group=factor(Year)))+ theme_gray(base_family = &quot;HiraKakuPro-W3&quot;)+ ylab(&quot;平均価格 (単位:千円/kg)&quot;)+xlab(&quot;&quot;)+ scale_color_manual(values=met.brewer(&quot;VanGogh2&quot;, 10))+ labs(color=&quot;&quot;)+ggtitle(&quot;りんごの平均輸出価格&quot;)+ theme_bw()-&gt;g3 g3 # 旬の価格 DBappleAll |&gt; filter(Month %in% c(&quot;Nov&quot;,&quot;Dec&quot;,&quot;Jan&quot;)) |&gt; ggplot()+ geom_line(aes(x=Month,y=sumPrice, color=factor(Year),group=factor(Year)))+ theme_gray(base_family = &quot;HiraKakuPro-W3&quot;)+ ylab(&quot;平均価格 (単位:千円/kg)&quot;)+xlab(&quot;&quot;)+ scale_color_manual(values=met.brewer(&quot;VanGogh2&quot;, 10))+ labs(color=&quot;&quot;)+ggtitle(&quot;りんごの輸出価格 (旬のみ)&quot;)+ theme_bw()-&gt;g4 g4 ４つのグラフを一つのファイルに (g3/ (g2 | g4)) * theme_bw()-&gt;g324 g324 "],["chapter07.html", "chapter: 7 Rによる統計的仮説検定 7.1 データの読み込み 7.2 平均・分散・標準偏差 7.3 分散・標準偏差が大きいことのイメージ 7.4 データフレームの要約 7.5 相関係数 7.6 仮説検定 7.7 t検定", " chapter: 7 Rによる統計的仮説検定 統計学の講義で学んだ検定をRで実行する方法を学びます。 # ライブラリコマンドでの読み込みは毎回必要 library(readxl) library(ggplot2) library(dplyr) #library(foreign) # Macユーザ向けの日本語フォント # theme_set(theme_gray(base_size = 10, base_family = &quot;HiraginoSans-W3&quot;)) #ウィンドウズユーザー向けの日本語フォント #windowsFonts(YuGothic = windowsFont(&quot;Yu Gothic&quot;)) #theme_set(theme_gray(base_size = 10, base_family = &quot;YuGothic&quot;)) 7.1 データの読み込み # 変数の対応関係 # A1101_総人口【人】 # A1301_15歳未満人口【人】 # A1303_65歳以上人口【人】 # B1101_ 総面積（北方地域及び竹島を除く）【ｈａ】 # B1103_ 可住地面積【ｈａ】 # B4107_ 雪日数（年間）【日】 # B4108_ 日照時間（年間）【時間】 # D110101_市町村数【‐】 # E6102_大学数【校】 # E6302_大学学生数【人】 # F610201_超過実労働時間数（男）【時間】 # F610202_超過実労働時間数（女）【時間】 # H110202_空き家数【戸】 #ウェブサイトから直接ダウンロードする場合 url1&lt;-&quot;https://yamamoto-masashi.github.io/DSlec/20201028sample.xls&quot; download.file(url1,destfile=&quot;20201028sample.xls&quot;) # エクセルファイルの読み込み # ヘッダ部分を読み飛ばしている # sheet=1を変更することで別のシートも読める sampleDB&lt;-read_excel(&quot;20201028sample.xls&quot;,skip=5,sheet=1) # 列１と列２の名前を変更している。 names(sampleDB)[1:2]&lt;-c(&quot;prefcode&quot;,&quot;prefnameJ&quot;) 7.2 平均・分散・標準偏差 都道府県別の市町村数を例に基本統計量の計算方法を示す。 #平均 mean(sampleDB$D110101) ## [1] 37 # 合計する sum(sampleDB$D110101) ## [1] 1741 #データの個数を求める length(sampleDB$D110101) ## [1] 47 #中央値を求める median(sampleDB$D110101) ## [1] 33 #最大値を求める max(sampleDB$D110101) ## [1] 179 #最小値を求める min(sampleDB$D110101) ## [1] 15 # 度数分布 table(sampleDB$D110101) ## ## 15 17 18 19 20 21 23 24 25 26 27 29 30 33 34 35 39 40 41 42 43 44 45 54 ## 1 2 1 5 2 1 1 1 2 2 2 1 2 2 1 4 1 1 2 1 2 1 1 2 ## 59 60 62 63 77 179 ## 1 1 1 1 1 1 #ヒストグラムを描く (標準) hist(sampleDB$D110101) #ヒストグラムを描く (ggplot2で) sampleDB %&gt;% ggplot()+ geom_histogram(aes(x=D110101,fill=factor(Kanto)), bins=80,position=&quot;nudge&quot;,alpha=0.7)+ geom_density(aes(x=D110101,y=..count..),fill=&quot;blue&quot;, alpha=0.3) + labs(fill=&quot;Kanto dummy&quot;)+xlab(&quot;Number of municipalities&quot;)+ geom_vline(xintercept = 33) #平方根を求める sqrt(sampleDB$D110101) ## [1] 13.4 6.3 5.7 5.9 5.0 5.9 7.7 6.6 5.0 5.9 7.9 7.3 7.9 5.7 5.5 3.9 4.4 4.1 ## [19] 5.2 8.8 6.5 5.9 7.3 5.4 4.4 5.1 6.6 6.4 6.2 5.5 4.4 4.4 5.2 4.8 4.4 4.9 ## [37] 4.1 4.5 5.8 7.7 4.5 4.6 6.7 4.2 5.1 6.6 6.4 以下の定義は覚えておこう。 母集団 (population)：調査対象となる要素の全体 標本 (sample)：母集団から抽出された個体の集まり 一致性 (consistency)：標本の数が多くなったら、サンプルの推定量が母数に一致すること 不偏性 (unbiasedness)：標本の推定量が母数に等しくなること 標本分散: \\(s_{xx}=\\frac{1}{n}\\sum_{i=1}^{n}(x_i-\\overline{x})^2\\) 不偏分散: \\(\\sigma_xx =\\frac{1}{n-1}\\sum_{i=1}^{n}(x_i-\\overline{x})^2=\\frac{n}{n-1}\\frac{1}{n}\\sum_{i=1}^{n}(x_i-\\overline{x})^2=\\frac{n}{n-1}s_{xx}\\) 推定量としては、不偏分散が望ましい。なお、分散の平方根を標準偏差(standard deviation)と呼ぶ。 #不偏分散を求める var(sampleDB$D110101) ## [1] 659 #標準偏差を求める sd(sampleDB$D110101) ## [1] 26 7.3 分散・標準偏差が大きいことのイメージ # # A大学の共通試験結果 # # １から２５まで１刻みで largeV&lt;-1:25 mean(largeV) ## [1] 13 sd(largeV) ## [1] 7.4 # # B大学の共通試験の結果 # smallV&lt;-c(10,11,12,13,14,15,16, 10,11,12,13,14,15,16, 10,11,12,13,14,15,16, 13,13,13,13) mean(smallV) ## [1] 13 sd(smallV) ## [1] 1.9 curve(dnorm(x,mean=mean(largeV),sd=sd(largeV)),ylim=c(0,0.25),from=1,to=25) curve(dnorm(x,mean=mean(smallV),sd=sd(smallV)),ylim=c(0,0.25),from=1,to=25,add=TRUE) ggplot(data=data.frame(X=c(1,25)), aes(x=X))+ stat_function(fun=dnorm, args=list(mean=mean(largeV), sd=sd(largeV)),color=&quot;red&quot;)+ stat_function(fun=dnorm, args=list(mean=mean(smallV), sd=sd(smallV)),color=&quot;blue&quot;)+ ylab(&quot;density&quot;)+ylim(0.01,0.25) ## Warning: Removed 62 rows containing missing values or values outside the scale range ## (`geom_function()`). 7.4 データフレームの要約 summary(sampleDB) ## prefcode prefnameJ A1101 A1301 A1303 ## Min. : 1 Length:47 Min. : 560000 Min. : 71000 Min. : 177000 ## 1st Qu.:12 Class :character 1st Qu.: 1085500 1st Qu.: 132000 1st Qu.: 339000 ## Median :24 Mode :character Median : 1614000 Median : 216000 Median : 506000 ## Mean :24 Mean : 2690277 Mean : 328043 Mean : 756915 ## 3rd Qu.:36 3rd Qu.: 2704000 3rd Qu.: 326500 3rd Qu.: 783000 ## Max. :47 Max. :13822000 Max. :1550000 Max. :3189000 ## B1101 B1103 B4107 B4108 D110101 E6102 ## Min. : 187678 Min. : 85553 Min. : 0 Min. :1526 Min. : 15 Min. : 2 ## 1st Qu.: 416640 1st Qu.: 131898 1st Qu.: 13 1st Qu.:1898 1st Qu.: 22 1st Qu.: 6 ## Median : 609733 Median : 205919 Median : 20 Median :2120 Median : 33 Median : 9 ## Mean : 793555 Mean : 260924 Mean : 35 Mean :2070 Mean : 37 Mean : 17 ## 3rd Qu.: 808915 3rd Qu.: 298550 3rd Qu.: 54 3rd Qu.:2238 3rd Qu.: 42 3rd Qu.: 18 ## Max. :7842077 Max. :2237238 Max. :131 Max. :2391 Max. :179 Max. :138 ## E6302 F610201 F610202 H110202 Kanto ## Min. : 6710 Min. :11.0 Min. : 5.0 Min. : 39900 Min. :0.00 ## 1st Qu.: 11696 1st Qu.:15.0 1st Qu.: 7.0 1st Qu.: 82700 1st Qu.:0.00 ## Median : 18376 Median :16.0 Median : 8.0 Median :126800 Median :0.00 ## Mean : 55312 Mean :15.9 Mean : 7.7 Mean :180615 Mean :0.15 ## 3rd Qu.: 43465 3rd Qu.:17.0 3rd Qu.: 9.0 3rd Qu.:197250 3rd Qu.:0.00 ## Max. :669191 Max. :20.0 Max. :10.0 Max. :809900 Max. :1.00 7.5 相関係数 二つの変数の直線的な関係を数値的に表す方法として相関係数 (correlation)がある。 相関係数の定義は以下の通り \\[r_{xy}=\\frac{s_{xy}}{\\sqrt{s_{xx}}\\sqrt{s_{yy}}}\\] ただし、 \\[s_{xy}=\\frac{1}{n}\\sum_{i=1}^{n}\\left(x_i-\\overline{x}\\right)\\left(y_i-\\overline{y}\\right)\\] は共分散である。 # 二つのデータは無相関であるという帰無仮説を検定 # 市町村数と都道府県の総面接 cor.test(sampleDB$D110101,sampleDB$B1101) ## ## Pearson&#39;s product-moment correlation ## ## data: sampleDB$D110101 and sampleDB$B1101 ## t = 10, df = 45, p-value = 6e-13 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.71 0.90 ## sample estimates: ## cor ## 0.83 # 市町村数と都道府県の可住地面接 cor.test(sampleDB$D110101,sampleDB$B1103) ## ## Pearson&#39;s product-moment correlation ## ## data: sampleDB$D110101 and sampleDB$B1103 ## t = 12, df = 45, p-value = 3e-15 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.77 0.93 ## sample estimates: ## cor ## 0.87 # 相関関係の可視化 plot(sampleDB$D110101,sampleDB$B1101) # ggplotによる可視化 sampleDB %&gt;% ggplot()+ geom_point(aes(x=D110101,y=B1101/1000,color=factor(Kanto)))+ xlab(&quot;Number of municipalities&quot;)+ylab(&quot;Total Area (thousand ha)&quot;)+ labs(color=&quot;Kanto Dummy&quot;) # 相関係数を３つ表示 sampleDB %&gt;% select(D110101,B1101,B1103)-&gt;sampleDBsmall library(psych) pairs.panels(sampleDBsmall) 7.6 仮説検定 ミクロ経済学は一定の仮定をもうけることで「必ず○○となる」と言った確定的な結論を提供する。しかし場合によってはその仮定が非現実的であることもある。実証分析は実際のデータに基づいているので、その方が優れているかというと必ずしもそうではない。例えば、教室にいる女性に「一番好きな食べ物は何か？」と聞いて、仮に全員が「焼き芋」と答えたとしても「世界中の女性が最も好きな食べ物は焼き芋である」ということにはならない。 母集団全体からデータを集めることは通常不可能である。そこで、どの程度の確率で自分の仮説が確からしいかを数量的に評価する方法が求められる。これが推測統計学を基礎とした計量経済学の基本的な考え方である。 そのための重要な考え方が、統計的仮説検定と呼ばれるものである。これは自身が主張したい仮説と逆の命題を「帰無仮説」として設定し、この「帰無仮説」がめったに起らないかどうかを確認する。このめったに起らないの「めったに」を有意水準といい、経済学では通常100回やったら5回以下しか起こらないような事象を指す。これを有意水準5%での仮説検定と呼ぶ。もし、有意水準5%で帰無仮説が棄却されたら、帰無仮説の逆の命題（対立仮説と呼ばれる）が消極的に指示されるのである。 7.7 t検定 母分散が未知である場合の一つの平均値の検定 標準正規分布の標本分散を不偏分散で置き換えた以下の推定量 \\[t=\\frac{\\overline{x}-\\mu}{\\hat{\\sigma}/\\sqrt{n}}\\] は自由度\\(n-1\\)の\\(t\\)分布に従うことが知られている。 分散・標準偏差の大きさのイメージで使用したデータが、正規分布しているA大学及びB大学の成績分布の中から抽出されたものだとしよう。例として、 帰無仮説：\\(\\mu=15\\) 対立仮説：\\(\\mu \\neq 15\\) を検定しよう。 #自由度=24のt分布 curve(dt(x,24),-3,3) abline(v=qt(0.025,24)) # 2.5%のライン abline(v=qt(0.975,24)) # 97.5%のライン # t検定を実施するコマンド t.test(smallV,mu=15) ## ## One Sample t-test ## ## data: smallV ## t = -5, df = 24, p-value = 2e-05 ## alternative hypothesis: true mean is not equal to 15 ## 95 percent confidence interval: ## 12 14 ## sample estimates: ## mean of x ## 13 t値が-5.3452であり、2.5%ラインを大きく下回っている。つまり、\\(\\mu=15\\)という帰無仮説が誤っていたと結論づけられる。母平均は15とは言えないという結論が有意水準5%で得られた。 来週以降に行う回帰分析においては、\\(\\mu=0\\)という帰無仮説を検定する。 "],["chapter08.html", "chapter: 8 Rによる重回帰分析 8.1 最小二乗法(Ordinary Least Squere Method)とは 8.2 単回帰の事例 8.3 重回帰分析 8.4 因果推論 (Quasi Experiment)の例", " chapter: 8 Rによる重回帰分析 #install.packages(&quot;gt&quot;) #install.packages(&quot;modelsummary&quot;) # ライブラリコマンドでの読み込みは毎回必要 library(readxl) library(ggplot2) library(dplyr) library(foreign) library(stargazer) library(gt) library(modelsummary) #getwd() # 現在の作業ディレクトリを確認 setwd(&quot;/users/yamamoto/R/ForTeaching&quot;) # 作業ディレクトリの変更 8.1 最小二乗法(Ordinary Least Squere Method)とは 観測されたデータ\\((X,Y)\\)に対して、 \\[Y=a+bX\\] という直線を当てはめることを考える。データが現実を反映しているとすれば、当てはまりが良ければ良いほど、求められた直線は現実のメカニズムを反映していることになる。もし、完全に当てはまったとすれば問題はないがそのようなことはまずないので、当てはまりの良さを判断する客観的な基準が必要になる。 # courtesy to # https://shohei-doi.github.io/notes/posts/2019-05-17-regression/ n &lt;- 50 tibble(x = rnorm(n, 0, 1), y = x + rnorm(n, 0, 1)) %&gt;% ggplot() + geom_point(aes(x = x, y = y)) + geom_line(aes(x = x, y = x)) + geom_errorbar(aes(x = x, ymin = x, ymax = y),linetype=&quot;dotted&quot;) 上の図でいう垂直方向の直線は試しに引いてみた直線 \\[ \\tilde{Y}=\\tilde{a}+\\tilde{b}x \\] と実際の観測値との誤差を示すものである。この誤差の二乗を最小にするような直線が最も当てはまりの良い直線と考える。誤差を\\(u\\)とすれば、 \\[ \\min J=\\sum \\tilde{u}_i^2=\\sum(Y_i-\\tilde{a}-\\tilde{b}X_i)^2 \\] の解である\\(\\hat{a}\\)と\\(\\hat{b}\\)を最小二乗推定量と呼ぶ。上式を微分してゼロとおくと、 \\[\\frac{\\partial J}{\\partial \\tilde{a}}=\\sum(-2(Y_i-\\hat{a}-\\hat{b}X_i))=0\\] 及び \\[\\frac{\\partial J}{\\partial \\tilde{b}}=\\sum(-2X_i(Y_i-\\hat{a}-\\hat{b}X_i))=0\\] となる。ここで、\\(\\hat{a}\\)と\\(\\hat{b}\\)は上式を満たす傾きと切片として、任意の\\(a\\)と\\(b\\)から区別する意味で使用している。これを変形すると以下を得る。 \\[n\\hat{a}+\\left(\\sum X_i \\right)\\hat{b}=\\sum Y_i\\] 及び \\[ \\left(\\sum X_i \\right)\\hat{a}+\\left(\\sum X_i^2 \\right)\\hat{b}=\\sum X_i Y_i\\] これを連立して解くと、 \\[ \\hat{b}=\\frac{\\sum \\left(X_i - \\overline{X}\\right)\\left(Y_i-\\overline{Y}\\right)}{\\sum \\left(X_i - \\overline{X}\\right)^2}\\] 及び \\[\\hat{a}=\\overline{Y}-\\hat{b} \\overline{X} \\] ただし、\\(\\overline{X}\\)と\\(\\overline{Y}\\)は平均値を意味する。 \\(X\\)及び\\(Y\\)は観測値なので、観測値から傾きと切片を計算できることがわかる。また、回帰直線は必ず標本平均を通ることも確認できる。 なお、最小二乗法に必要な仮定やその優れた性質については、 http://www.yuhikaku.co.jp/books/detail/9784641053854 などの入門の計量経済学の本を参照のこと。 8.2 単回帰の事例 # Wooldridge (2016) Introductory Econometrics, Thomson. # の事例より。 ####################################################### # CEOのサラリーは会社のROEでどの程度説明できるか？ ####################################################### # # 自己資本利益率（ROE：Return on Equity）とは、自己資本（純資産）に対してどれだけの # 利益が生み出されたのかを示す財務分析の指標 # from Wooldridge(2016, section 2.2) #ceosal1の最後の２文字は、小文字のエルと数字の１なので注意 ceosal1&lt;-read.dta(&quot;http://fmwww.bc.edu/ec-p/data/wooldridge/ceosal1.dta&quot;) ceoresult&lt;-lm(salary~roe,data=ceosal1) summary(ceoresult) ## ## Call: ## lm(formula = salary ~ roe, data = ceosal1) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1160 -526 -254 139 13500 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 963.2 213.2 4.52 1.1e-05 *** ## roe 18.5 11.1 1.66 0.098 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1370 on 207 degrees of freedom ## Multiple R-squared: 0.0132, Adjusted R-squared: 0.00842 ## F-statistic: 2.77 on 1 and 207 DF, p-value: 0.0978 plot(ceosal1$roe,ceosal1$salary,ylim=c(0,4000)) abline(ceoresult) ####################################################### # 選挙費用で投票結果はどの程度説明できるか？ ####################################################### # from Wooldridge(2016, section 2.2のexample 2.5) # 1988年のアメリカのとある州における国会議員選挙の結果 # voteAは候補者Aの得票シェア、shareAは候補者Aの選挙運動費のシェア vote1&lt;-read.dta(&quot;http://fmwww.bc.edu/ec-p/data/wooldridge/vote1.dta&quot;) voteAresult&lt;-lm(voteA~shareA,data=vote1) summary(voteAresult) ## ## Call: ## lm(formula = voteA ~ shareA, data = vote1) ## ## Residuals: ## Min 1Q Median 3Q Max ## -16.89 -4.07 -0.17 3.50 29.98 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 26.8125 0.8872 30.2 &lt;2e-16 *** ## shareA 0.4638 0.0145 31.9 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 6.4 on 171 degrees of freedom ## Multiple R-squared: 0.856, Adjusted R-squared: 0.855 ## F-statistic: 1.02e+03 on 1 and 171 DF, p-value: &lt;2e-16 plot(vote1$shareA,vote1$voteA) abline(voteAresult) 上の２つ目の結果で、shareAのt値は31.9でt分布の97.5%よりもはるかに大きな値となっている。そのためめったに起らない事象と位置付けることができる。 この時の事象は帰無仮説：\\(\\hat{b}=0\\)であるから、この帰無仮説を棄却し、\\(X\\)と\\(Y\\)は正の相関関係にあると言える。 8.3 重回帰分析 ####################################################### # 大学の成績は何で説明できるか？ ####################################################### # from Wooldridge(2016, example 4.3) # colGPA: 大学での成績 # hsGPA: 高校での成績 # ACT: 大学入試の際に受ける共通テストの成績 # skipped: １週間の平均講義欠席回数 gpa1&lt;-read.dta(&quot;http://fmwww.bc.edu/ec-p/data/wooldridge/gpa1.dta&quot;) GPAresult&lt;-lm(colGPA~hsGPA+ACT+skipped,data=gpa1) summary(GPAresult) ## ## Call: ## lm(formula = colGPA ~ hsGPA + ACT + skipped, data = gpa1) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.8570 -0.2320 -0.0393 0.2482 0.8166 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.3896 0.3316 4.19 5.0e-05 *** ## hsGPA 0.4118 0.0937 4.40 2.2e-05 *** ## ACT 0.0147 0.0106 1.39 0.1658 ## skipped -0.0831 0.0260 -3.20 0.0017 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.33 on 137 degrees of freedom ## Multiple R-squared: 0.234, Adjusted R-squared: 0.217 ## F-statistic: 13.9 on 3 and 137 DF, p-value: 5.65e-08 plot(gpa1$colGPA,gpa1$skipped) 8.4 因果推論 (Quasi Experiment)の例 因果推論の方法として、Wooldridge(2016, Example 13.3)を例にDifference-in-Differencesを解説する。この例は、Kiel and McClain(1995, JEEM)からの抜粋であり、Massachusetts州のNorth Andoverにおいて、焼却炉を建設することで周辺の住宅価値が下がったかどうかをDifference-in-Differencesで分析している。 分析の前提条件として、1978年には焼却炉建設の噂さえなかったが1981年には建設の噂が出回ったという背景がある。 住宅価格(\\(=rprice\\))を、1981年のデータだけを使って焼却炉に近い物件のダミー変数(\\(=nearinc\\))で回帰する。 \\[ rprice=a+b\\times nearinc+u \\] kielmc&lt;-read.dta(&quot;http://fmwww.bc.edu/ec-p/data/wooldridge/kielmc.dta&quot;) # Separate regressions for 1978 and 1981: report coeeficients only coef( lm(rprice~nearinc, data=kielmc, subset=(year==1981)) ) ## (Intercept) nearinc ## 101308 -30688 \\(\\hat{b}=-30,688.7\\)という結果を得る。\\(\\hat{a}\\)は平均的な1981年の住宅価格を意味している。しかし、この結果は焼却炉建設の噂がもたらしたマイナス要因とは言えない。なぜなら、まだ噂がなかった1978年のデータだけで上記の式を回帰しても、\\(\\hat{b}=-18824.37\\)というマイナスの結果となるためである。 kielmc&lt;-read.dta(&quot;http://fmwww.bc.edu/ec-p/data/wooldridge/kielmc.dta&quot;) # Separate regressions for 1978 and 1981: report coeeficients only coef( lm(rprice~nearinc, data=kielmc, subset=(year==1978)) ) ## (Intercept) nearinc ## 82517 -18824 つまり、もともと住宅価格の安い地域に焼却炉の建設が行われたのである。よって、焼却炉立地の影響は、 \\[\\hat{b}_{81}-\\hat{b}_{78}=-30,68.27-(-18,824.37)=-11,863.9\\] と考えるのが自然である。これを差の差の推定量(difference-in-differences estimator)と呼ぶ。なぜなら、 \\[\\hat{b}_{81}-\\hat{b}_{78}=\\left(\\overline{rprice}_{81,n}-\\overline{rprice}_{81,f}\\right)-\\left(\\overline{rprice}_{78,n}-\\overline{rprice}_{78,f}\\right)\\] と書き直せるからである。ここで、添字の\\(n\\)は焼却炉に近い住宅の価格、\\(f\\)は遠い住宅の価格を表している。 実践的には、統計的検定ができるように以下の回帰分析で推定量を計算する。 \\[rprice=a+b_{1} \\cdot y81 + b_{2} \\cdot nearinc + b_{3} \\cdot (y81 \\times nearinc) + u\\] を1978年と1981年の両方のデータを使って推定する。ただし、\\(y81\\)は1981年の住宅価格で1、1978年の住宅価格に対して0をとるダミー変数である。この時、\\(a\\)は1978年の平均住宅価格、\\(b_1\\)は1978年から1981年における住宅価格の変化を意味する。\\(b_2\\)は、焼却炉建設と関係なく、焼却炉周辺地域の住宅価格の他地域との差を表す。最後に、\\(b_3\\)は焼却炉建設の噂による価格変化を表す(=DiD estimator)。 このように、焼却炉建設など政策の影響を受けるサンプルをTreatment groupと呼ぶ。影響を受けないグループをControl groupと言う。因果推論を行うためには、Treatment groupとControl groupの両方が必ず必要である。より一般には以下のように書ける。 \\[Y=a+b_{1} \\cdot YD + b_{2} \\cdot T + b_{3} \\cdot (YD \\times T) +\\mathbf{z}+ u\\] ここで、\\(YD\\)はtreatmentの前と後でそれぞれ\\(0\\)と\\(1\\)をとるダミー変数、\\(T\\)はtreatmentのあるなしでそれぞれ\\(1\\)や\\(0\\)をとるダミー変数、\\(\\mathbf{z}\\)はその他の変数をさす。DiD estimatorはもちろん\\(b_3\\)である。 Before After After - Before Control \\(a\\) \\(a+b_1\\) \\(b_1\\) Treatment \\(a+b_2\\) \\(a+b_1+b_2+b_3\\) \\(b_1+b_3\\) Treatment - Control \\(b_2\\) \\(b_2+b_3\\) \\(b_3\\) 8.4.1 例1 # Joint regression including an interaction term # 他のコントロール変数を含めない場合 result1&lt;- lm(rprice~nearinc+y81+I(nearinc*y81), data=kielmc) summary(result1) ## ## Call: ## lm(formula = rprice ~ nearinc + y81 + I(nearinc * y81), data = kielmc) ## ## Residuals: ## Min 1Q Median 3Q Max ## -60678 -17693 -3031 12483 236307 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 82517 2727 30.26 &lt; 2e-16 *** ## nearinc -18824 4875 -3.86 0.00014 *** ## y81 18790 4050 4.64 5.1e-06 *** ## I(nearinc * y81) -11864 7457 -1.59 0.11259 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 30200 on 317 degrees of freedom ## Multiple R-squared: 0.174, Adjusted R-squared: 0.166 ## F-statistic: 22.3 on 3 and 317 DF, p-value: 4.22e-13 8.4.2 例2 # 住宅の築年数だけ含めた場合 result2&lt;- lm(rprice~nearinc+y81+age+I(age^2)+I(nearinc*y81), data=kielmc) summary(result2) ## ## Call: ## lm(formula = rprice ~ nearinc + y81 + age + I(age^2) + I(nearinc * ## y81), data = kielmc) ## ## Residuals: ## Min 1Q Median 3Q Max ## -79349 -14431 -1711 10069 201486 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 8.91e+04 2.41e+03 37.04 &lt; 2e-16 *** ## nearinc 9.40e+03 4.81e+03 1.95 0.05171 . ## y81 2.13e+04 3.44e+03 6.19 1.9e-09 *** ## age -1.49e+03 1.32e+02 -11.33 &lt; 2e-16 *** ## I(age^2) 8.69e+00 8.48e-01 10.25 &lt; 2e-16 *** ## I(nearinc * y81) -2.19e+04 6.36e+03 -3.45 0.00064 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 25500 on 315 degrees of freedom ## Multiple R-squared: 0.414, Adjusted R-squared: 0.405 ## F-statistic: 44.6 on 5 and 315 DF, p-value: &lt;2e-16 8.4.3 例3 # 他のコントロール変数も含めた場合 result3&lt;- lm(rprice~nearinc+y81+age+I(age^2)+I(nearinc*y81)+intst+ land+area+rooms+baths, data=kielmc) summary(result3) ## ## Call: ## lm(formula = rprice ~ nearinc + y81 + age + I(age^2) + I(nearinc * ## y81) + intst + land + area + rooms + baths, data = kielmc) ## ## Residuals: ## Min 1Q Median 3Q Max ## -76721 -8885 -252 8433 136649 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.38e+04 1.12e+04 1.24 0.2172 ## nearinc 3.78e+03 4.45e+03 0.85 0.3966 ## y81 1.39e+04 2.80e+03 4.98 1.1e-06 *** ## age -7.39e+02 1.31e+02 -5.64 3.8e-08 *** ## I(age^2) 3.45e+00 8.13e-01 4.25 2.9e-05 *** ## I(nearinc * y81) -1.42e+04 4.99e+03 -2.84 0.0048 ** ## intst -5.39e-01 1.96e-01 -2.74 0.0064 ** ## land 1.41e-01 3.11e-02 4.55 7.7e-06 *** ## area 1.81e+01 2.31e+00 7.84 7.2e-14 *** ## rooms 3.30e+03 1.66e+03 1.99 0.0476 * ## baths 6.98e+03 2.58e+03 2.70 0.0073 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 19600 on 310 degrees of freedom ## Multiple R-squared: 0.66, Adjusted R-squared: 0.649 ## F-statistic: 60.2 on 10 and 310 DF, p-value: &lt;2e-16 modelsummaryというパッケージでまとめて表示できる。 DiDresults &lt;-list( &quot;Base&quot; = result1, &quot;With year&quot;=result2, &quot;With all&quot;=result3 ) modelsummary(DiDresults,stars = TRUE) /* tinytable css entries after */ .table td.tinytable_css_x1ffb4wjwidaozdwse3z, .table th.tinytable_css_x1ffb4wjwidaozdwse3z { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_u5gmyw8letr2qaevzo1o, .table th.tinytable_css_u5gmyw8letr2qaevzo1o { text-align: center; border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_tmca17ay9jc8bebau0tm, .table th.tinytable_css_tmca17ay9jc8bebau0tm { text-align: left; } .table td.tinytable_css_m8iuql8yq2y4d4lo3s9w, .table th.tinytable_css_m8iuql8yq2y4d4lo3s9w { text-align: center; } .table td.tinytable_css_kcwulqwgst2mcxlsvryb, .table th.tinytable_css_kcwulqwgst2mcxlsvryb { text-align: left; border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_8r7o0ij39jpixfc0iwum, .table th.tinytable_css_8r7o0ij39jpixfc0iwum { text-align: left; border-bottom: solid black 0.05em; } .table td.tinytable_css_6gh7u1hcgse4unbdkny6, .table th.tinytable_css_6gh7u1hcgse4unbdkny6 { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_4op2ie5lhg4sgdsqbgob, .table th.tinytable_css_4op2ie5lhg4sgdsqbgob { text-align: center; border-bottom: solid black 0.05em; } Base With year With all + p (Intercept) 82517.228*** 89116.535*** 1.4e+04 (2726.910) (2406.051) (1.1e+04) nearinc -18824.370*** 9397.936+ 3.8e+03 (4875.322) (4812.222) (4.5e+03) y81 18790.286*** 21321.042*** 1.4e+04*** (4050.065) (3443.631) (2.8e+03) I(nearinc * y81) -11863.903 -21920.270*** -1.4e+04** (7456.646) (6359.745) (5.0e+03) age -1494.424*** -7.4e+02*** (131.860) (1.3e+02) I(age^2) 8.691*** 3.5e+00*** (0.848) (8.1e-01) intst -5.4e-01** (2.0e-01) land 1.4e-01*** (3.1e-02) area 1.8e+01*** (2.3e+00) rooms 3.3e+03* (1.7e+03) baths 7.0e+03** (2.6e+03) Num.Obs. 321 321 321 R2 0.174 0.414 0.660 R2 Adj. 0.166 0.405 0.649 AIC 7540.5 7434.0 7269.5 BIC 7559.3 7460.4 7314.7 Log.Lik. -3765.229 -3710.001 -3622.729 F 22.251 44.591 60.189 RMSE 30053.88 25303.44 19279.94 8.4.4 logをとった場合 効果を割合として解釈できる。より当てはまりがよくなる場合もある。 DiD &lt;- lm(log(rprice)~nearinc*y81, data=kielmc) DiDcontr &lt;- lm(log(rprice)~nearinc*y81+age+I(age^2)+log(intst)+ log(land)+log(area)+rooms+baths, data=kielmc) DiDlogresults&lt;-list( &quot;Base (log)&quot;=DiD, &quot;With all (log)&quot; = DiDcontr ) modelsummary(DiDlogresults,stars = TRUE) /* tinytable css entries after */ .table td.tinytable_css_xx9fzs8x8o6goyhg0tl2, .table th.tinytable_css_xx9fzs8x8o6goyhg0tl2 { text-align: left; border-bottom: solid black 0.05em; } .table td.tinytable_css_rr8nldl7rtw6rnhqsrl0, .table th.tinytable_css_rr8nldl7rtw6rnhqsrl0 { text-align: center; border-bottom: solid black 0.05em; } .table td.tinytable_css_r9p2sbwa4t3xxynj8t03, .table th.tinytable_css_r9p2sbwa4t3xxynj8t03 { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_nv3xaeibwlgux9lk8cq0, .table th.tinytable_css_nv3xaeibwlgux9lk8cq0 { text-align: center; } .table td.tinytable_css_auf7fqu156aa66ekpot2, .table th.tinytable_css_auf7fqu156aa66ekpot2 { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_3ylzk7fyt1oo22ax69yl, .table th.tinytable_css_3ylzk7fyt1oo22ax69yl { text-align: left; border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_39q6yeh9zyc5okuosd6o, .table th.tinytable_css_39q6yeh9zyc5okuosd6o { text-align: center; border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_2oeolg4gx3up3n2954qg, .table th.tinytable_css_2oeolg4gx3up3n2954qg { text-align: left; } Base (log) With all (log) + p (Intercept) 11.285*** 7.652*** (0.031) (0.416) nearinc -0.340*** 0.032 (0.055) (0.047) y81 0.193*** 0.162*** (0.045) (0.028) nearinc × y81 -0.063 -0.132* (0.083) (0.052) age -0.008*** (0.001) I(age^2) 0.000*** (0.000) log(intst) -0.061+ (0.032) log(land) 0.100*** (0.024) log(area) 0.351*** (0.051) rooms 0.047** (0.017) baths 0.094*** (0.028) Num.Obs. 321 321 R2 0.246 0.733 R2 Adj. 0.239 0.724 AIC 7451.2 7132.4 BIC 7470.0 7177.7 Log.Lik. -105.675 60.690 F 34.470 84.915 RMSE 0.34 0.20 焼却炉立地の噂は13.2％の住宅価格押し下げ効果があったことがわかる。 "],["chapter09.html", "chapter: 9 dplyrによるデータ集計 9.1 はじめに 9.2 パイプ演算子について 9.3 エクセル作業を代替してみる", " chapter: 9 dplyrによるデータ集計 9.1 はじめに データ分析にかかる時間の大半は、分析目的に合わせてデータをキレイに整える段階に費やされます。Rのdplyrというpackageを用いて、少しでも楽にデータ集計を進めるためのコツを学びます。 一定の時間が経過した後に見直しをすると、クリック操作で行った手続きを思い出すことは不可能です。できるだけRの環境の中でデータの整理を行うことでデータ整理自体の時間節約になるだけでなく、dplyrコマンドとして作業を記録しておくことで、過去の自分が何をしたかを思い出す時間も節約することができます。 #install.packages(&quot;dplyr&quot;) library(dplyr) library(ggplot2) head(midwest) ## # A tibble: 6 × 28 ## PID county state area poptotal popdensity popwhite popblack popamerindian popasian popother ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 561 ADAMS IL 0.052 66090 1271. 63917 1702 98 249 124 ## 2 562 ALEXA… IL 0.014 10626 759 7054 3496 19 48 9 ## 3 563 BOND IL 0.022 14991 681. 14477 429 35 16 34 ## 4 564 BOONE IL 0.017 30806 1812. 29344 127 46 150 1139 ## 5 565 BROWN IL 0.018 5836 324. 5264 547 14 5 6 ## 6 566 BUREAU IL 0.05 35688 714. 35157 50 65 195 221 ## # ℹ 17 more variables: percwhite &lt;dbl&gt;, percblack &lt;dbl&gt;, percamerindan &lt;dbl&gt;, percasian &lt;dbl&gt;, ## # percother &lt;dbl&gt;, popadults &lt;int&gt;, perchsd &lt;dbl&gt;, percollege &lt;dbl&gt;, percprof &lt;dbl&gt;, ## # poppovertyknown &lt;int&gt;, percpovertyknown &lt;dbl&gt;, percbelowpoverty &lt;dbl&gt;, ## # percchildbelowpovert &lt;dbl&gt;, percadultpoverty &lt;dbl&gt;, percelderlypoverty &lt;dbl&gt;, ## # inmetro &lt;int&gt;, category &lt;chr&gt; 9.2 パイプ演算子について パイプ演算子とは%&gt;%のことで、dplyrを読み込むことで使用できます。パイプ演算子は、パイプの左側のオブジェクトを右側に「流す」ことができます。最初は直感的にわかりにくいかもしれませんが、これによって、以下のようなメリットが生まれます。 集計の途中で無駄なデータフレームを作る必要がない。 コードが簡素化され、見やすくなる。 改行が入るので、コメントを残しやすい。 一方、デメリットとしては、たまにパイプ演算子を使うとうまく機能させられない関数がありますが、入門の段階ではそのような現象はほとんどなく、導入のメリットしかないと思いますので、積極的に活用ですべきと考えます。 # パイプ演算子を用いた場合 midwest %&gt;% ggplot()+geom_histogram(aes(poptotal))+theme_bw() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # パイプ演算子を用いない場合 ggplot(midwest)+geom_histogram(data=midwest,aes(poptotal))+ theme_bw() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # パイプ演算子で他の演算も行う midwest %&gt;% filter(state==&quot;MI&quot;) %&gt;% # 対象をミシガン州だけに ggplot()+geom_histogram(aes(poptotal))+ theme_bw() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # パイプ演算子を用いないで、他の演算も行う midwestMI&lt;-filter(midwest, state==&quot;MI&quot;) ggplot(midwestMI)+geom_histogram(aes(poptotal))+ theme_bw() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 最後の例では結果として２行になり、midwestMIというデータフレームも作成された。 9.3 エクセル作業を代替してみる エクセルでクリックで行う作業をコードで残そう。演習に使うデータとして、総務省統計局による家計調査を使用する。  家計調査は標本調査であり，層化3段抽出法（第1段―市町村，第2段―単位区，第3段―世帯）により世帯を選定している。選定にあたっては特定の世帯が続けて調査の対象にならないように配慮している。市町村の抽出の仕方は次のとおりである。都道府県庁所在市及び政令指定都市については各市を1層とし52層に分けた。その他の人口5万以上の市については直近の国勢調査の結果に基づき，地方，都市階級に分けた後， 人口集中地区人口比率 人口増減率 産業的特色 世帯主の年齢構成 を考慮して74層に分けた。また，人口5万未満の市及び町村は，地方で分けた後，(1)地理的位置（海沿い，山地等），(2)世帯主の年齢構成を用いて，計42層に分けた。このようにして分けられた全国計168層の各層から1市町村ずつ抽出した。 地域 調査市町村数 二人以上の調査世帯数 単身調査世帯数 全国 168 8,076 673 都道府県庁所在市及び大都市 52 5,472 456 人口5万以上の市（上記の市を除く） 74 2,100 175 人口5万未満の市及び町村 42 504 42 library(readxl) #ウェブサイトから直接ダウンロードする場合 url3&lt;-&quot;https://yamamoto-masashi.github.io/DSlec/kakei2000.xlsx&quot; download.file(url3,destfile=&quot;kakei2000.xlsx&quot;) # エクセルファイルの読み込み # sheet=1を変更することで別のシートも読める kakeiDB&lt;-readxl::read_excel(&quot;kakei2000.xlsx&quot;,sheet=1) データベースの列を増減する。mutate()関数で新しい変数を加えることができます。select()関数はデータフレームに維持する変数名を指定して任意の大きさのデータフレームに変更できます。以下の例では変数名に「-」(マイナス)をつけることで指定した変数だけを除外したデータフレームを作成しています。 # 列の追加 kakeiDB %&gt;% dplyr::rowwise() %&gt;% mutate(rSum1920=sum(FY2019, FY2020)) -&gt;kakeiDB head(kakeiDB) ## # A tibble: 6 × 28 ## # Rowwise: ## Category1 Category1J Category2 Category2J Category3 Category3J FY2000 FY2001 FY2002 FY2003 ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 食料 10 穀類 1 米 40256 38293 36593 37256 ## 2 1 食料 10 穀類 2 パン 27512 26358 26750 27189 ## 3 1 食料 10 穀類 3 麺類 18771 18373 18389 18165 ## 4 1 食料 10 穀類 4 他の穀類 4354 4266 4169 4170 ## 5 1 食料 11 魚介類 1 生鮮魚介 67847 65056 64564 60487 ## 6 1 食料 11 魚介類 2 塩干魚介 19876 19360 18741 18009 ## # ℹ 18 more variables: FY2004 &lt;dbl&gt;, FY2005 &lt;dbl&gt;, FY2006 &lt;dbl&gt;, FY2007 &lt;dbl&gt;, FY2008 &lt;dbl&gt;, ## # FY2009 &lt;dbl&gt;, FY2010 &lt;dbl&gt;, FY2011 &lt;dbl&gt;, FY2012 &lt;dbl&gt;, FY2013 &lt;dbl&gt;, FY2014 &lt;dbl&gt;, ## # FY2015 &lt;dbl&gt;, FY2016 &lt;dbl&gt;, FY2017 &lt;dbl&gt;, FY2018 &lt;dbl&gt;, FY2019 &lt;dbl&gt;, FY2020 &lt;dbl&gt;, ## # rSum1920 &lt;dbl&gt; # 列の削除 kakeiDB %&gt;% select(-rSum1920) -&gt; kakeiDB head(kakeiDB) ## # A tibble: 6 × 27 ## # Rowwise: ## Category1 Category1J Category2 Category2J Category3 Category3J FY2000 FY2001 FY2002 FY2003 ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 食料 10 穀類 1 米 40256 38293 36593 37256 ## 2 1 食料 10 穀類 2 パン 27512 26358 26750 27189 ## 3 1 食料 10 穀類 3 麺類 18771 18373 18389 18165 ## 4 1 食料 10 穀類 4 他の穀類 4354 4266 4169 4170 ## 5 1 食料 11 魚介類 1 生鮮魚介 67847 65056 64564 60487 ## 6 1 食料 11 魚介類 2 塩干魚介 19876 19360 18741 18009 ## # ℹ 17 more variables: FY2004 &lt;dbl&gt;, FY2005 &lt;dbl&gt;, FY2006 &lt;dbl&gt;, FY2007 &lt;dbl&gt;, FY2008 &lt;dbl&gt;, ## # FY2009 &lt;dbl&gt;, FY2010 &lt;dbl&gt;, FY2011 &lt;dbl&gt;, FY2012 &lt;dbl&gt;, FY2013 &lt;dbl&gt;, FY2014 &lt;dbl&gt;, ## # FY2015 &lt;dbl&gt;, FY2016 &lt;dbl&gt;, FY2017 &lt;dbl&gt;, FY2018 &lt;dbl&gt;, FY2019 &lt;dbl&gt;, FY2020 &lt;dbl&gt; filter()関数を使って条件をつけてデータベースの行を絞り込む。 # 魚介類だけを取り出す kakeiDB %&gt;% filter(Category2==11)-&gt;Cat2_11 print(Cat2_11) ## # A tibble: 4 × 27 ## # Rowwise: ## Category1 Category1J Category2 Category2J Category3 Category3J FY2000 FY2001 FY2002 FY2003 ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 食料 11 魚介類 1 生鮮魚介 67847 65056 64564 60487 ## 2 1 食料 11 魚介類 2 塩干魚介 19876 19360 18741 18009 ## 3 1 食料 11 魚介類 3 魚肉練製品 10425 10329 9601 9203 ## 4 1 食料 11 魚介類 4 他の魚介加工品 12720 12345 11847 11198 ## # ℹ 17 more variables: FY2004 &lt;dbl&gt;, FY2005 &lt;dbl&gt;, FY2006 &lt;dbl&gt;, FY2007 &lt;dbl&gt;, FY2008 &lt;dbl&gt;, ## # FY2009 &lt;dbl&gt;, FY2010 &lt;dbl&gt;, FY2011 &lt;dbl&gt;, FY2012 &lt;dbl&gt;, FY2013 &lt;dbl&gt;, FY2014 &lt;dbl&gt;, ## # FY2015 &lt;dbl&gt;, FY2016 &lt;dbl&gt;, FY2017 &lt;dbl&gt;, FY2018 &lt;dbl&gt;, FY2019 &lt;dbl&gt;, FY2020 &lt;dbl&gt; group_by()関数を使ってグループに分けて計算する。今回はsummarize()関数を使って最大値を計算しています。 #2000年の消費（大分類） kakeiDB %&gt;% group_by(Category1J) %&gt;% summarize(max2000=max(FY2000/1000)) %&gt;% ggplot()+ theme_gray(base_family = &quot;HiraKakuPro-W3&quot;)+ coord_flip()+ geom_bar(aes(x = Category1J, y = max2000), stat = &quot;identity&quot;,fill=&quot;orange&quot;)+ xlab(&quot;&quot;)+ylab(&quot;大分類の最大値(2000年, 単位：千円/年)&quot;)+ ggtitle(&quot;家計調査による消費支出（名目値）&quot;)+ theme_bw() #2020年の消費（大分類） kakeiDB %&gt;% group_by(Category1J) %&gt;% summarize(max2020=max(FY2020/1000)) %&gt;% ggplot()+ theme_gray(base_family = &quot;HiraKakuPro-W3&quot;)+ coord_flip()+ geom_bar(aes(x = Category1J, y = max2020), stat = &quot;identity&quot;,fill=&quot;lightblue&quot;)+ xlab(&quot;&quot;)+ylab(&quot;大分類の最大値(2020年, 単位：千円/年)&quot;)+ ggtitle(&quot;家計調査による消費支出（名目値）&quot;)+ theme_bw() 二つ以上のデータベースを結合する #2020年のセリーグの成績 teamnameJ&lt;-c(&quot;巨人&quot;, &quot;阪神&quot;, &quot;中日&quot;,&quot;DeNA&quot;, &quot;広島&quot;, &quot;ヤクルト&quot;) win2020&lt;-c(67,60,56,58,52,41) lose2020&lt;-c(45,53,55,58,56,69) pct2020&lt;-c(0.598,0.531,0.522,0.491,0.481,0.373) Cen2020&lt;-as.data.frame(cbind(teamnameJ,win2020,lose2020,pct2020)) print(Cen2020) ## teamnameJ win2020 lose2020 pct2020 ## 1 巨人 67 45 0.598 ## 2 阪神 60 53 0.531 ## 3 中日 56 55 0.522 ## 4 DeNA 58 58 0.491 ## 5 広島 52 56 0.481 ## 6 ヤクルト 41 69 0.373 #2001年のセリーグの成績 teamnameJ&lt;-c(&quot;ヤクルト&quot;, &quot;巨人&quot;, &quot;DeNA&quot;, &quot;広島&quot;, &quot;中日&quot;,&quot;阪神&quot;) win2001&lt;-c(76,75,69,68,62,57) lose2001&lt;-c(58,63,67,65,74,80) pct2001&lt;-c(0.567,0.543,0.507,0.511,0.456,0.416) Cen2001&lt;-as.data.frame(cbind(teamnameJ,win2001,lose2001,pct2001)) print(Cen2001) ## teamnameJ win2001 lose2001 pct2001 ## 1 ヤクルト 76 58 0.567 ## 2 巨人 75 63 0.543 ## 3 DeNA 69 67 0.507 ## 4 広島 68 65 0.511 ## 5 中日 62 74 0.456 ## 6 阪神 57 80 0.416 # 二つの記録を結合する #left_join(A,B)関数はAにBを結合する Cen20012020&lt;-left_join(Cen2001,Cen2020,by=&quot;teamnameJ&quot;) print(Cen20012020) ## teamnameJ win2001 lose2001 pct2001 win2020 lose2020 pct2020 ## 1 ヤクルト 76 58 0.567 41 69 0.373 ## 2 巨人 75 63 0.543 67 45 0.598 ## 3 DeNA 69 67 0.507 58 58 0.491 ## 4 広島 68 65 0.511 52 56 0.481 ## 5 中日 62 74 0.456 56 55 0.522 ## 6 阪神 57 80 0.416 60 53 0.531 Cen20202001&lt;-left_join(Cen2020,Cen2001,by=&quot;teamnameJ&quot;) print(Cen20202001) ## teamnameJ win2020 lose2020 pct2020 win2001 lose2001 pct2001 ## 1 巨人 67 45 0.598 75 63 0.543 ## 2 阪神 60 53 0.531 57 80 0.416 ## 3 中日 56 55 0.522 62 74 0.456 ## 4 DeNA 58 58 0.491 69 67 0.507 ## 5 広島 52 56 0.481 68 65 0.511 ## 6 ヤクルト 41 69 0.373 76 58 0.567 "],["chapter10.html", "chapter: 10 Rmarkdownの使い方 10.1 Rmarkdownを用いる理由 10.2 Rmarkdownの使い方 10.3 参考資料", " chapter: 10 Rmarkdownの使い方 10.1 Rmarkdownを用いる理由 個人的にデータを分析して楽しむ?場合には特に問題になりませんが、将来、データ分析の結果を仕事で用いることになった場合、その再現性が重要になります。前の学期に作業したエクセルファイルをどうやって作成したか、ファイルそのものを見直しても全く思い出せない、という経験がある人が皆さんの中にもいるかもしれません。個人の学習としてはともかく、ビジネスでこのようなことがおこることは絶対に避けなければなりません。 一定の時間が経過した後も同じ結果を確実に再現できるためには当初の分析段階で適切に記録を残しておくことが重要です。分析過程の記録を残すためのpackageとして、Rmarkdownというものがあります。このRmarkdownを使うことで作成者の記録がとりやすいだけでなく、後でこの記録をみる利用者にとってもわかりやす資料を作ることができます。 10.2 Rmarkdownの使い方 最も簡単にRmarkdownを使う方法は、RStudioのメニューからNew File、R Markdownを選択し、htmlで出力することです。このやり方は講義で画面で説明します。 Rmarkdownを用いることで、htmlの途中にRのコードを簡単に含めることができます。このコードは単にコードを表示するだけでなく、htmlを作成するタイミングで実行して実行結果を含めることができます。このコードを含める部分をチャンクと言います。チャンクで使用できるオプションについてはこちらを参考にしてください。 10.3 参考資料 さらに細かい設定などに興味のある人は以下のサイトを参照してください。 Rmarkdown入門 (by kazutan on web) Rmarkdown入門 (by Jaehyun Song) "],["chapter11.html", "chapter: 11 グラフを書いてみよう・問題を解いてみよう 11.1 1. 基礎編 11.2 2. 応用編 11.3 3. 応用編", " chapter: 11 グラフを書いてみよう・問題を解いてみよう library(tidyverse) 11.1 1. 基礎編 問１ \\(-3&lt;x&lt;3\\)の範囲において、以下の(1)式および(2)式のグラフをかけ。 (1). \\(y=2x+2\\) # To plot functions without data, specify range of x-axis base &lt;- ggplot() + xlim(-3, 3)+ xlab(&quot;X&quot;)+ theme(axis.text = element_text(size=16), axis.title=element_text(size=16))+ theme_bw() base+stat_function(fun=function(x) 2*x+2) (2). \\(y=x^{2}+2\\) base+stat_function(fun=function(x) x^2+2) 11.2 2. 応用編 問2 \\(-3&lt;x&lt;3\\)の範囲において、以下の(3)式、(4)式および(5)式のグラフをかけ (3). \\(y=2^{x}\\) base+stat_function(fun=function(x) 2^{x}) (4). \\(y=\\left(\\frac{1}{2}\\right)^{x}\\) base+stat_function(fun=function(x) (1/2)^{x}) (5). \\(y=\\log_{2}x\\) base+stat_function(fun=function(x) log2(x)) ## Warning in fun(x_trans): NaNs produced ## Warning: Removed 50 rows containing missing values or values outside the scale range ## (`geom_function()`). ここで、NaNは、「Not a number」という意味で、「計算不可能な式の結果」を意味しています。高校の教科書で対数の定義を確認すると、\\(a&gt;0\\)、\\(a\\neq 1\\)の時、任意の正の整数\\(M\\)に対して、 \\(a^p=M\\) となる実数\\(p\\)がただひとつ定まります。この\\(p\\)を\\(a\\)を底とする\\(M\\)の対数といい、 \\(\\log_a M\\) と書く、とされています。また、\\(M\\)をこの対数の真数と言いますが、対数の真数は、正の数となります。\\(a\\)が正の数である限りは、\\(M\\)が負になることはないのです。このことを踏まえて、\\(x\\)軸の範囲を変更して再度作図してみましょう。 base+xlim(0.01,5)+ stat_function(fun=function(x) log2(x))+ geom_abline(slope=0,intercept=1,color=&quot;red&quot;) ## Scale for x is already present. ## Adding another scale for x, which will replace the existing scale. 対数関数はその性質上、\\((1,0)\\)を必ず通ります。また、上図の赤線は、\\(y=1\\)のグラフですが、この例の対数関数は、\\(x=2\\)でこの赤線と交わります。 11.3 3. 応用編 問3.1 \\(-2 \\leq x \\leq 4\\)の範囲において、(6)式の関数の最大値と最小値を求めよ。 (6). \\(y=-2x^{3}+3x^{2}+12x\\) ggplot() + xlab(&quot;X&quot;)+ theme(axis.text = element_text(size=16), axis.title=element_text(size=16))+ xlim(-2,4)+ stat_function(fun=function(x) -2*x^3+3*x^2+12*x, color=&quot;blue&quot;)+ geom_hline(yintercept=0)+ geom_vline(xintercept=0)+ geom_segment(aes(x=0,y=20,xend=2,yend=20), color=&#39;red&#39;,linetype=&quot;dashed&quot;)+ geom_segment(aes(x=2,y=0,xend=2,yend=20), color=&#39;red&#39;,linetype=&quot;dashed&quot;)+ geom_segment(aes(x=-1,y=0,xend=-1,yend=-7), color=&#39;green&#39;,linetype=&quot;dashed&quot;)+ geom_segment(aes(x=0,y=-7,xend=-1,yend=-7), color=&#39;green&#39;,linetype=&quot;dashed&quot;)+ geom_segment(aes(x=4,y=0,xend=4,yend=-32), color=&#39;green&#39;,linetype=&quot;dashed&quot;)+ geom_segment(aes(x=0,y=-32,xend=4,yend=-32), color=&#39;green&#39;,linetype=&quot;dashed&quot;)+ annotate(&quot;text&quot;,x=2,y=-1.3,label=&quot;2&quot;,size=5)+ annotate(&quot;text&quot;,x=-0.2,y=20,label=&quot;20&quot;,size=5)+ annotate(&quot;text&quot;,x=-1,y=1.3,label=&quot;-1&quot;,size=5)+ annotate(&quot;text&quot;,x=0.2,y=-7,label=&quot;-7&quot;,size=5)+ annotate(&quot;text&quot;,x=4,y=1.3,label=&quot;4&quot;,size=5)+ annotate(&quot;text&quot;,x=-0.2,y=-32,label=&quot;-32&quot;,size=5)+ theme_bw() \\(y^\\prime=-6x^2+6x+12=-6(x+1)(x-2)\\) つまり、\\(y^\\prime=0\\)の時、\\(x=-1,2\\)である。増減表の代わりにグラフを見ると、この例の範囲では、極大値は最大値となっているが、極小値は最小値ではない。\\(=2\\)で最大値20、\\(x=4\\)で最小値-32となっている。 問3.2 次の二つの放物線で囲まれた図形の面積\\(S\\)を求めよ。 (7). \\(y=x^{2}+2x-3 ~~~ \\text{and} ~~~ y=-x^{2}+2x+3\\) ggplot() + xlab(&quot;X&quot;)+ theme(axis.text = element_text(size=16), axis.title=element_text(size=16))+ xlim(-4,4)+ylim(-5,5)+ stat_function(fun=function(x) -x^2+2*x+3, color=&quot;blue&quot;)+ stat_function(fun=function(x) x^2+2*x-3, color=&quot;lightblue&quot;)+ geom_hline(yintercept=0)+ geom_vline(xintercept=0)+ geom_segment(aes(x=sqrt(3),y=0,xend=sqrt(3), yend=2*sqrt(3)), color=&#39;red&#39;,linetype=&quot;dashed&quot;)+ geom_segment(aes(x=-sqrt(3),y=0,xend=-sqrt(3), yend=-2*sqrt(3)), color=&#39;red&#39;,linetype=&quot;dashed&quot;)+ annotate(&quot;text&quot;,x=3.2,y=0.5,label=&quot;3&quot;)+ annotate(&quot;text&quot;,x=-2.9,y=0.5,label=&quot;-3&quot;)+ annotate(&quot;text&quot;,x=sqrt(3),y=-0.8, label=expression(sqrt(3)))+ annotate(&quot;text&quot;,x=-0.2,y=3.1,label=&quot;3&quot;)+ annotate(&quot;text&quot;,x=0.2,y=-3,label=&quot;-3&quot;)+ annotate(&quot;text&quot;,x=-sqrt(3),y=0.8, label=expression(-sqrt(3)))+ theme_bw() ２つの放物線は図のようになり、その交点の\\(x\\)座標は、 \\(x^2+2x+3=-x^2+2x+3\\) を解くことで求められる。これを解くと、 \\(2x^2-6=0\\) より、 \\(x=\\pm \\sqrt(3)\\) よって、求める面積\\(S\\)は、 \\(S=\\int_{-\\sqrt(3)}^{\\sqrt(3)} \\{(-x^2+2x+3)- (x^2+2x+3)\\} dx=\\large[6x-\\frac{2}{3}x^3 \\large]_{-\\sqrt(3)}^{\\sqrt(3)}=8\\sqrt(3)\\) "],["chapter12.html", "chapter: 12 参考になるウェブサイト 12.1 データ 12.2 Rについて 12.3 このサイトにある他の情報", " chapter: 12 参考になるウェブサイト 12.1 データ 国土交通省国土数値情報 総務省統計局 e-Stat (政府統計の総合窓口) 法務省 G空間情報センター 独立行政法人 統計センター SSDSE（教育用標準データセット） 気象庁 過去の気象データ検索  12.2 Rについて R言語入門 (R-4.3.3 2024年4月版) Rによる地理空間データの可視化 私たちのR Rによるデータ解析のための前処理 Rmarkdown入門 (by kazutan on web) Rmarkdown入門 (by Jaehyun Song) 12.3 このサイトにある他の情報 オープンデータによる市町村の可視化：高山市の例 日立市の現状 EuroStatの扱い "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
